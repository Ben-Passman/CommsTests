
I2C Tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803e00  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00803e16  00803e16  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002758  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019dd  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007cc  00000000  00000000  00004655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00004e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001503  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000324  00000000  00000000  000065d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000068fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	df c0       	rjmp	.+446    	; 0x1ca <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	94 c0       	rjmp	.+296    	; 0x152 <__vector_20>
  2a:	17 c1       	rjmp	.+558    	; 0x25a <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e2 e0       	ldi	r30, 0x02	; 2
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 31       	cpi	r26, 0x16	; 22
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a6 e1       	ldi	r26, 0x16	; 22
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 32       	cpi	r26, 0x21	; 33
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	aa d0       	rcall	.+340    	; 0x1bc <main>
  68:	4a c1       	rjmp	.+660    	; 0x2fe <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_M_IDLE>:
	------------------------------------------------------------------------------------------------	*/

static i2c_states_t I2C_M_IDLE(void)
{
	return I2C_IDLE;
}
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	08 95       	ret

00000070 <I2C_M_START>:
	// On receiving ACK/NACK (if arbitration not lost) SCL held low and CLKHOLD and WIF set.
	// If bus already owned, repeat start generated. (ACK/NACK sent first if previous operation was read)
	// For read command RIF is set after byte received.
	// Writes to MSTATUS clear flags (CHECK).
	
	i2c_fsm.byte_count = 0;
  70:	e6 e1       	ldi	r30, 0x16	; 22
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	14 82       	std	Z+4, r1	; 0x04
	TWI0.MADDR = i2c_fsm.slave_addr;
  76:	80 81       	ld	r24, Z
  78:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
		
	return (i2c_fsm.slave_addr & I2C_READ_bm) ? I2C_RX_BYTE : I2C_TX_BYTE;
  7c:	80 fd       	sbrc	r24, 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <I2C_M_START+0x14>
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	08 95       	ret
  84:	85 e0       	ldi	r24, 0x05	; 5
}
  86:	08 95       	ret

00000088 <I2C_M_STOP>:

static i2c_states_t I2C_M_STOP(void)
{
	// Executes ACK/NACK followed by stop condition. Set ACK/NACK as well for read.
	TWI0.MCTRLB	|= TWI_MCMD_STOP_gc;
  88:	e0 e1       	ldi	r30, 0x10	; 16
  8a:	f8 e0       	ldi	r31, 0x08	; 8
  8c:	84 81       	ldd	r24, Z+4	; 0x04
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	84 83       	std	Z+4, r24	; 0x04
	
	return I2C_IDLE;
}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	08 95       	ret

00000096 <I2C_M_RESET>:

static i2c_states_t I2C_M_RESET(void)
{
	TWI0.MCTRLB |= TWI_FLUSH_bm;
  96:	e0 e1       	ldi	r30, 0x10	; 16
  98:	f8 e0       	ldi	r31, 0x08	; 8
  9a:	84 81       	ldd	r24, Z+4	; 0x04
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	84 83       	std	Z+4, r24	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
  a0:	85 81       	ldd	r24, Z+5	; 0x05
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	85 83       	std	Z+5, r24	; 0x05
	
	return I2C_IDLE;
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret

000000aa <I2C_M_TX>:
static i2c_states_t I2C_M_TX(void)
{
	// MDATA Read/Write only available during CLKHOLD.
	// Write to MDATA forces transmit, ignores ACKACT
	// MDATA read/write clears interrupt flags, but not ARBLOST or BUSERR
	TWI0.MDATA = *(i2c_fsm.byte_array + i2c_fsm.byte_count);
  aa:	e6 e1       	ldi	r30, 0x16	; 22
  ac:	fe e3       	ldi	r31, 0x3E	; 62
  ae:	84 81       	ldd	r24, Z+4	; 0x04
  b0:	a1 81       	ldd	r26, Z+1	; 0x01
  b2:	b2 81       	ldd	r27, Z+2	; 0x02
  b4:	a8 0f       	add	r26, r24
  b6:	b1 1d       	adc	r27, r1
  b8:	9c 91       	ld	r25, X
  ba:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
	i2c_fsm.byte_count ++;
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	84 83       	std	Z+4, r24	; 0x04
	
	return (i2c_fsm.byte_count >= i2c_fsm.size_byte_array) ? I2C_STOP : I2C_TX_BYTE;
  c2:	93 81       	ldd	r25, Z+3	; 0x03
  c4:	89 17       	cp	r24, r25
  c6:	10 f4       	brcc	.+4      	; 0xcc <I2C_M_TX+0x22>
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	08 95       	ret
  cc:	82 e0       	ldi	r24, 0x02	; 2
}
  ce:	08 95       	ret

000000d0 <I2C_M_RX>:

static i2c_states_t I2C_M_RX(void)
{
	// To send NACK, set ACKACT in MCTRLB to 1
	*(i2c_fsm.byte_array + i2c_fsm.byte_count) = TWI0.MDATA;
  d0:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
  d4:	e6 e1       	ldi	r30, 0x16	; 22
  d6:	fe e3       	ldi	r31, 0x3E	; 62
  d8:	94 81       	ldd	r25, Z+4	; 0x04
  da:	a1 81       	ldd	r26, Z+1	; 0x01
  dc:	b2 81       	ldd	r27, Z+2	; 0x02
  de:	a9 0f       	add	r26, r25
  e0:	b1 1d       	adc	r27, r1
  e2:	8c 93       	st	X, r24
	i2c_fsm.byte_count ++;
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	84 83       	std	Z+4, r24	; 0x04
	
	return (i2c_fsm.byte_count >= i2c_fsm.size_byte_array) ? I2C_STOP : I2C_RX_BYTE;
  ea:	93 81       	ldd	r25, Z+3	; 0x03
  ec:	89 17       	cp	r24, r25
  ee:	10 f4       	brcc	.+4      	; 0xf4 <I2C_M_RX+0x24>
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	08 95       	ret
  f4:	82 e0       	ldi	r24, 0x02	; 2
}
  f6:	08 95       	ret

000000f8 <I2C_M_RX_NACK>:

static i2c_states_t I2C_M_RX_NACK(void)
{
	// No distinction between DATA/ADDR fail
	return I2C_M_STOP();
  f8:	c7 df       	rcall	.-114    	; 0x88 <I2C_M_STOP>
}
  fa:	08 95       	ret

000000fc <I2C_M_ARB_LOST>:
//	-	NACK
//	-	Start/Repeat Start
// Need to abort or re-send start (MADDR), re-send for now. Write to MADDR will clear flag.
static i2c_states_t I2C_M_ARB_LOST(void)
{
	return I2C_M_STOP();
  fc:	c5 df       	rcall	.-118    	; 0x88 <I2C_M_STOP>
}
  fe:	08 95       	ret

00000100 <I2C_M_BUS_ERR>:
// BUS ERROR
// S/Sr/P violation
// Reset peripheral and Re-send. MADDR clears BUSERR flag.
static i2c_states_t I2C_M_BUS_ERR(void)
{
	return I2C_M_STOP();
 100:	c3 df       	rcall	.-122    	; 0x88 <I2C_M_STOP>
}
 102:	08 95       	ret

00000104 <i2c_state_isr>:
	I2C_M_ARB_LOST,
	I2C_M_BUS_ERR
};

void i2c_state_isr (void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
	// WIF set on write completion, regardless of error
	// Check ARBLOST in multi-master environment.
	// Read triggers ACK/NACK and one byte read. RIF then set, WIF on error.
	// TWI0.MSTATUS |= TWI_WIF_bm | TWI_RIF_bm; // Not required. Cleared by state machine operations.	
	
	if (TWI0.MSTATUS & TWI_RXACK_bm) // NACK received
 108:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 10c:	84 ff       	sbrs	r24, 4
 10e:	03 c0       	rjmp	.+6      	; 0x116 <i2c_state_isr+0x12>
	{
		i2c_fsm.state = I2C_NACK;
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <__data_end+0x5>
	}
	
	if (TWI0.MSTATUS & TWI_ARBLOST_bm)
 116:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 11a:	83 ff       	sbrs	r24, 3
 11c:	03 c0       	rjmp	.+6      	; 0x124 <i2c_state_isr+0x20>
	{
		i2c_fsm.state = I2C_ARB_ERR;
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <__data_end+0x5>
	}
	
	if(TWI0.MSTATUS & TWI_BUSERR_bm)
 124:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 128:	82 ff       	sbrs	r24, 2
 12a:	03 c0       	rjmp	.+6      	; 0x132 <i2c_state_isr+0x2e>
	{
		i2c_fsm.state = I2C_BUS_ERR;
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	80 93 1b 3e 	sts	0x3E1B, r24	; 0x803e1b <__data_end+0x5>
	}
	
	i2c_fsm.state = state_callbacks[i2c_fsm.state]();
 132:	c6 e1       	ldi	r28, 0x16	; 22
 134:	de e3       	ldi	r29, 0x3E	; 62
 136:	ed 81       	ldd	r30, Y+5	; 0x05
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	f2 4c       	sbci	r31, 0xC2	; 194
 142:	01 90       	ld	r0, Z+
 144:	f0 81       	ld	r31, Z
 146:	e0 2d       	mov	r30, r0
 148:	09 95       	icall
 14a:	8d 83       	std	Y+5, r24	; 0x05
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <__vector_20>:
/*	------------------------------------------------------------------------------------------------
	INTERRUPTS
	------------------------------------------------------------------------------------------------	*/

ISR(TWI0_TWIM_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	// Bus is IDLE, OWNER, BUSY or UNDEFINED. Errors are ARBLOST and BUSERR
	// ARBLOST fails at any point on packet transmission, start -> NACK
	// For ARBLOST must restart (write to MADDR). MADDR write clears ARBLOST flag.
	// BUSERR is an illegal condition (e.g. Start followed by Stop). MADDR write clears BUSERR flag.
	
	i2c_state_isr();
 174:	c7 df       	rcall	.-114    	; 0x104 <i2c_state_isr>
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <system_init>:
uint8_t bytes[] = {	0x40, OLATA0, 0x67	}; // Need to initialise expander IO port before this will work. IODRA, 0x00

uint8_t system_init() 
{
	/*	GPIO	*/
	PORTC.PIN5CTRL = PORT_ISC_FALLING_gc; // Interrupt on button down
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
	PORTB.DIRSET = PIN2_bm | PIN3_bm;  // UART
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
	PORTA.DIRSET = PIN1_bm | PIN2_bm;	// TWI
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	
	/*	I/O Lines	*/
	PORTMUX.CTRLB = PORTMUX_TWI0_ALTERNATE_gc | PORTMUX_SPI0_ALTERNATE_gc | PORTMUX_USART0_DEFAULT_gc;
 1aa:	84 e1       	ldi	r24, 0x14	; 20
 1ac:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	
	/*	Interrupts	*/
	SREG |= CPU_I_bm;
 1b0:	8f b7       	in	r24, 0x3f	; 63
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	8f bf       	out	0x3f, r24	; 63
	
	spi_master_init();
 1b6:	8d d0       	rcall	.+282    	; 0x2d2 <spi_master_init>
	
	return 0;
}
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret

000001bc <main>:

int main(void)
{
	system_init();
 1bc:	ed df       	rcall	.-38     	; 0x198 <system_init>
	
	// Should use (const unint8_t *) for EEPROM.
	spi_set_buffer((uint8_t *)0x1400, 3);
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	94 e1       	ldi	r25, 0x14	; 20
 1c4:	7f d0       	rcall	.+254    	; 0x2c4 <spi_set_buffer>
	spi_start();
 1c6:	96 d0       	rcall	.+300    	; 0x2f4 <spi_start>
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0xc>

000001ca <__vector_5>:
		
    }
}

ISR(PORTC_PORT_vect)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	uint8_t intflags = PORTC.INTFLAGS;
 1ec:	e0 e4       	ldi	r30, 0x40	; 64
 1ee:	f4 e0       	ldi	r31, 0x04	; 4
 1f0:	81 85       	ldd	r24, Z+9	; 0x09
	PORTC.INTFLAGS = intflags;
 1f2:	81 87       	std	Z+9, r24	; 0x09
	
	spi_set_buffer(bytes, 3);
 1f4:	63 e0       	ldi	r22, 0x03	; 3
 1f6:	82 e1       	ldi	r24, 0x12	; 18
 1f8:	9e e3       	ldi	r25, 0x3E	; 62
 1fa:	64 d0       	rcall	.+200    	; 0x2c4 <spi_set_buffer>
	spi_start();
 1fc:	7b d0       	rcall	.+246    	; 0x2f4 <spi_start>
	bytes[2] = bytes[2] >> 7 | bytes[2] << 1;
 1fe:	e2 e1       	ldi	r30, 0x12	; 18
 200:	fe e3       	ldi	r31, 0x3E	; 62
 202:	82 81       	ldd	r24, Z+2	; 0x02
 204:	88 0f       	add	r24, r24
 206:	81 1d       	adc	r24, r1
 208:	82 83       	std	Z+2, r24	; 0x02
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <spi_slave_select>:

spi_data spi_io = {0};

void spi_slave_select(void)
{
	VPORTC.OUT &= ~PIN3_bm; // Set SS low
 22c:	4b 98       	cbi	0x09, 3	; 9
 22e:	08 95       	ret

00000230 <spi_slave_deselect>:
}

void spi_slave_deselect(void)
{
	VPORTC.OUT |= PIN3_bm; // Set SS high
 230:	4b 9a       	sbi	0x09, 3	; 9
 232:	08 95       	ret

00000234 <spi_isr>:
		For non-buffer mode:
		SPI_IF_bm is set on transfer complete. Cleared on interrupt vector execution, or by SPI.INTFLAGS read followed by DATA access.
		SPI_WRCOL is set if DATA is written before shift out is complete.
	*/
	
	if (spi_io.byte_count < spi_io.size_byte_array)
 234:	ec e1       	ldi	r30, 0x1C	; 28
 236:	fe e3       	ldi	r31, 0x3E	; 62
 238:	84 81       	ldd	r24, Z+4	; 0x04
 23a:	93 81       	ldd	r25, Z+3	; 0x03
 23c:	89 17       	cp	r24, r25
 23e:	58 f4       	brcc	.+22     	; 0x256 <spi_isr+0x22>
	{
		SPI0.DATA = *(spi_io.byte_array + spi_io.byte_count);
 240:	a1 81       	ldd	r26, Z+1	; 0x01
 242:	b2 81       	ldd	r27, Z+2	; 0x02
 244:	a8 0f       	add	r26, r24
 246:	b1 1d       	adc	r27, r1
 248:	8c 91       	ld	r24, X
 24a:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
		spi_io.byte_count ++;
 24e:	84 81       	ldd	r24, Z+4	; 0x04
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	84 83       	std	Z+4, r24	; 0x04
 254:	08 95       	ret
	}
	else
	{
		spi_slave_deselect();
 256:	ec df       	rcall	.-40     	; 0x230 <spi_slave_deselect>
 258:	08 95       	ret

0000025a <__vector_21>:
	}
}

ISR(SPI0_INT_vect)
{
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	1f 92       	push	r1
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	register8_t int_flags = SPI0.INTFLAGS;
 286:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
 28a:	89 83       	std	Y+1, r24	; 0x01
	// SPI_WRCOL_bm		write collision
	// SPI_IF_bm		byte transfer complete
	
	if (int_flags & SPI_WRCOL_bm)
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	86 ff       	sbrs	r24, 6
 290:	02 c0       	rjmp	.+4      	; 0x296 <__vector_21+0x3c>
	{
		spi_slave_deselect();
 292:	ce df       	rcall	.-100    	; 0x230 <spi_slave_deselect>
 294:	01 c0       	rjmp	.+2      	; 0x298 <__vector_21+0x3e>
	} else
	{
		spi_isr();
 296:	ce df       	rcall	.-100    	; 0x234 <spi_isr>
	}
	SPI0.INTFLAGS = 0x00;
 298:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
}
 29c:	0f 90       	pop	r0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <spi_set_buffer>:
	
	------------------------------------------------------------------------------------------------	*/

void spi_set_buffer(uint8_t *buff, uint8_t size)
{
	spi_io.byte_array = buff;
 2c4:	ec e1       	ldi	r30, 0x1C	; 28
 2c6:	fe e3       	ldi	r31, 0x3E	; 62
 2c8:	81 83       	std	Z+1, r24	; 0x01
 2ca:	92 83       	std	Z+2, r25	; 0x02
	spi_io.size_byte_array = size;
 2cc:	63 83       	std	Z+3, r22	; 0x03
	spi_io.byte_count = 0;
 2ce:	14 82       	std	Z+4, r1	; 0x04
 2d0:	08 95       	ret

000002d2 <spi_master_init>:
	// MISO	PA2/PC1 -	SPI controlled
	// SCK	PA3/PC0	-	User defined
	// SS	PA4/PC3	-	User defined
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
 2d2:	e0 e4       	ldi	r30, 0x40	; 64
 2d4:	f4 e0       	ldi	r31, 0x04	; 4
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	82 83       	std	Z+2, r24	; 0x02
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Try from app note
 2da:	8d e0       	ldi	r24, 0x0D	; 13
 2dc:	81 83       	std	Z+1, r24	; 0x01
//	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
	//PORTC.PIN0CTRL = 0<<PORT_INVEN_bp | 1<<PORT_PULLUPEN_bp | PORT_ISC_INPUT_DISABLE_gc;
	//PORTC.PIN2CTRL = 0<<PORT_INVEN_bp | 1<<PORT_PULLUPEN_bp | PORT_ISC_INPUT_DISABLE_gc;
	//PORTC.PIN3CTRL = 0<<PORT_INVEN_bp | 1<<PORT_PULLUPEN_bp | PORT_ISC_INPUT_DISABLE_gc;
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
 2de:	48 98       	cbi	0x09, 0	; 9
	spi_slave_deselect();
 2e0:	a7 df       	rcall	.-178    	; 0x230 <spi_slave_deselect>
	
	// Setup for non-buffer mode.
	SPI0.CTRLB = 0<<SPI_BUFEN_bp | 
 2e2:	e0 e2       	ldi	r30, 0x20	; 32
 2e4:	f8 e0       	ldi	r31, 0x08	; 8
 2e6:	84 e4       	ldi	r24, 0x44	; 68
 2e8:	81 83       	std	Z+1, r24	; 0x01
				1<<SPI_BUFWR_bp | 
				1<<SPI_SSD_bp | 
				SPI_MODE_0_gc; // Disable multi-master for now
	SPI0.INTCTRL = SPI_IE_bm; // Buffer mode disabled, use this interrupt.	
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	82 83       	std	Z+2, r24	; 0x02
	SPI0.CTRLA = 0<<SPI_DORD_bp | 
 2ee:	85 e2       	ldi	r24, 0x25	; 37
 2f0:	80 83       	st	Z, r24
 2f2:	08 95       	ret

000002f4 <spi_start>:
				1<<SPI_ENABLE_bp; // MSB first as per MCP23S17 datasheet
}

void spi_start ()
{
	spi_slave_select();
 2f4:	9b df       	rcall	.-202    	; 0x22c <spi_slave_select>
	// Setup time?
	spi_io.byte_count = 0;
 2f6:	10 92 20 3e 	sts	0x3E20, r1	; 0x803e20 <spi_io+0x4>
	spi_isr();
 2fa:	9c df       	rcall	.-200    	; 0x234 <spi_isr>
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
