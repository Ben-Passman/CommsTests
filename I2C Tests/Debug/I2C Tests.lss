
I2C Tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00803e00  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803e10  00803e10  00000336  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bea  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018ca  00000000  00000000  0000301e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000557  00000000  00000000  000048e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00004e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017f3  00000000  00000000  00004fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000276  00000000  00000000  000067cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00006a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	e6 c0       	rjmp	.+460    	; 0x1d8 <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	23 c1       	rjmp	.+582    	; 0x258 <__vector_8>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	74 c0       	rjmp	.+232    	; 0x112 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e2 e9       	ldi	r30, 0x92	; 146
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 31       	cpi	r26, 0x10	; 16
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a0 e1       	ldi	r26, 0x10	; 16
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 31       	cpi	r26, 0x16	; 22
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b6 d0       	rcall	.+364    	; 0x1d4 <main>
  68:	12 c1       	rjmp	.+548    	; 0x28e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_M_PLACEHOLDER>:
	------------------------------------------------------------------------------------------------	*/

static i2c_states_t I2C_M_PLACEHOLDER()
{
	return I2C_IDLE;
}
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	08 95       	ret

00000070 <I2C_M_START>:
	// Bus is busy master will wait until idle.
	// On receiving ACK/NACK (if arbitration not lost) SCL held low and CLKHOLD and WIF set.
	// If bus already owned, repeat start generated. (ACK/NACK sent first if previous operation was read)
	// For read command RIF is set after byte received.
	// Writes to MSTATUS clear flags (CHECK).
	setup_data.byte_count = 0;
  70:	e0 e1       	ldi	r30, 0x10	; 16
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	14 82       	std	Z+4, r1	; 0x04
	TWI0.MADDR = (setup_data.slave_addr<<1 | I2C_WRITE_bm);
  76:	80 81       	ld	r24, Z
  78:	88 0f       	add	r24, r24
  7a:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
	
	// READ/WRITE SELECT NOT YET IMPLEMENTED.	
	return (I2C_WRITE_bm == I2C_WRITE_bm) ? I2C_TX_BYTE : I2C_RX_BYTE;
}
  7e:	85 e0       	ldi	r24, 0x05	; 5
  80:	08 95       	ret

00000082 <I2C_M_STOP>:

static i2c_states_t I2C_M_STOP()
{
	// Executes ACK/NACK followed by stop condition. Set ACK/NACK as well for read.
	TWI0.MCTRLB	|= TWI_MCMD_STOP_gc;
  82:	e0 e1       	ldi	r30, 0x10	; 16
  84:	f8 e0       	ldi	r31, 0x08	; 8
  86:	84 81       	ldd	r24, Z+4	; 0x04
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	84 83       	std	Z+4, r24	; 0x04
	
	return I2C_IDLE;
}
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	08 95       	ret

00000090 <I2C_M_WRITE>:
	// Check ARBLOST in multi-master environment.
	// Write to MDATA forces transmit, ignores ACKACT
	// MDATA read/write clears interrupt flags, but not ARBLOST or BUSERR
	// Read triggers ACK/NACK and one byte read. RIF then set, WIF on error.
	
	TWI0.MDATA = *(setup_data.byte_array + setup_data.byte_count);
  90:	e0 e1       	ldi	r30, 0x10	; 16
  92:	fe e3       	ldi	r31, 0x3E	; 62
  94:	84 81       	ldd	r24, Z+4	; 0x04
  96:	a1 81       	ldd	r26, Z+1	; 0x01
  98:	b2 81       	ldd	r27, Z+2	; 0x02
  9a:	a8 0f       	add	r26, r24
  9c:	b1 1d       	adc	r27, r1
  9e:	9c 91       	ld	r25, X
  a0:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
	setup_data.byte_count ++;
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	84 83       	std	Z+4, r24	; 0x04
	
	return (setup_data.byte_count >= setup_data.size_byte_array) ? I2C_STOP : I2C_TX_BYTE;
  a8:	93 81       	ldd	r25, Z+3	; 0x03
  aa:	89 17       	cp	r24, r25
  ac:	10 f4       	brcc	.+4      	; 0xb2 <I2C_M_WRITE+0x22>
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	08 95       	ret
  b2:	84 e0       	ldi	r24, 0x04	; 4
}
  b4:	08 95       	ret

000000b6 <i2c_set_buffer>:

I2C_data setup_data = {0};

void i2c_set_buffer(uint8_t *buff, uint8_t size) 
{
	setup_data.byte_array = buff;
  b6:	e0 e1       	ldi	r30, 0x10	; 16
  b8:	fe e3       	ldi	r31, 0x3E	; 62
  ba:	81 83       	std	Z+1, r24	; 0x01
  bc:	92 83       	std	Z+2, r25	; 0x02
	setup_data.size_byte_array = size;
  be:	63 83       	std	Z+3, r22	; 0x03
	setup_data.byte_count = 0;
  c0:	14 82       	std	Z+4, r1	; 0x04
  c2:	08 95       	ret

000000c4 <i2c_master_init>:
}

void i2c_master_init()
{
	// Peripheral controls
	TWI0.CTRLA = TWI_SDASETUP_4CYC_gc | TWI_SDAHOLD_OFF_gc; // FMPEN (fast mode) set to zero
  c4:	e0 e1       	ldi	r30, 0x10	; 16
  c6:	f8 e0       	ldi	r31, 0x08	; 8
  c8:	10 82       	st	Z, r1
	TWI0.DBGCTRL = TWI_DBGRUN_bm; // Keep peripheral running during debug mode
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	82 83       	std	Z+2, r24	; 0x02
	// I2C Master controls
	TWI0.MBAUD = 0x0B; // Derives SCL hi/lo times. (See data sheet for equation) Write while ENABLE bit in TWI.MCTRLA is '0
  ce:	8b e0       	ldi	r24, 0x0B	; 11
  d0:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_TIMEOUT_DISABLED_gc | TWI_ENABLE_bm; // Quick command and smart mode not in use
  d2:	81 ec       	ldi	r24, 0xC1	; 193
  d4:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MCTRLB &= ~TWI_ACKACT_bm; // 0 send ACK, 1 send NACK when data read or execute command written to CMD bits
  d6:	84 81       	ldd	r24, Z+4	; 0x04
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	84 83       	std	Z+4, r24	; 0x04
	TWI0_MCTRLB |= TWI_FLUSH_bm;
  dc:	a4 e1       	ldi	r26, 0x14	; 20
  de:	b8 e0       	ldi	r27, 0x08	; 8
  e0:	8c 91       	ld	r24, X
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8c 93       	st	X, r24
	
	// !!ASSUMES BUS IS IDLE, SHOULD CHECK LINES ARE GOOD!!
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
  e6:	85 81       	ldd	r24, Z+5	; 0x05
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	85 83       	std	Z+5, r24	; 0x05
	setup_data.state = I2C_IDLE;
  ec:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <__data_end+0x5>
  f0:	08 95       	ret

000000f2 <i2c_start>:
	
	// SHOULD RETURN SUCCESS/FAIL?
}

void i2c_start (uint8_t addr, uint8_t read_write) {
	setup_data.byte_count = 0;
  f2:	e0 e1       	ldi	r30, 0x10	; 16
  f4:	fe e3       	ldi	r31, 0x3E	; 62
  f6:	14 82       	std	Z+4, r1	; 0x04
	setup_data.slave_addr = addr;
  f8:	80 83       	st	Z, r24
	setup_data.state = (read_write == I2C_WRITE_bm) ?  I2C_TX_BYTE : I2C_RX_BYTE;
  fa:	66 23       	and	r22, r22
  fc:	11 f0       	breq	.+4      	; 0x102 <i2c_start+0x10>
  fe:	96 e0       	ldi	r25, 0x06	; 6
 100:	01 c0       	rjmp	.+2      	; 0x104 <i2c_start+0x12>
 102:	95 e0       	ldi	r25, 0x05	; 5
 104:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <__data_end+0x5>
	
	TWI0.MADDR = (addr<<1 | read_write);
 108:	88 0f       	add	r24, r24
 10a:	68 2b       	or	r22, r24
 10c:	60 93 17 08 	sts	0x0817, r22	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
 110:	08 95       	ret

00000112 <__vector_20>:
/*	------------------------------------------------------------------------------------------------
	INTERRUPTS
	------------------------------------------------------------------------------------------------	*/

ISR(TWI0_TWIM_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	// ARBLOST fails at any point on packet transmission, start -> NACK
	// For ARBLOST must restart (write to MADDR). MADDR write clears ARBLOST flag.
	// BUSERR is an illegal condition (e.g. Start followed by Stop). MADDR write clears BUSERR flag.
	
	// Debug, count i2c ops and light up LEDs
	VPORTA.OUT |= 0x10 << setup_data.byte_count;
 138:	21 b1       	in	r18, 0x01	; 1
 13a:	c0 e1       	ldi	r28, 0x10	; 16
 13c:	de e3       	ldi	r29, 0x3E	; 62
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0c 80       	ldd	r0, Y+4	; 0x04
 144:	02 c0       	rjmp	.+4      	; 0x14a <__vector_20+0x38>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <__vector_20+0x34>
 14e:	82 2b       	or	r24, r18
 150:	81 b9       	out	0x01, r24	; 1
	
	// NEED ERROR CHECKS HERE, BUSERR + ARBLOST + NACK.
	// (TWI0.MSTATUS & TWI_RXACK_bm)
	setup_data.state = state_callbacks[setup_data.state]();
 152:	ed 81       	ldd	r30, Y+5	; 0x05
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e0 50       	subi	r30, 0x00	; 0
 15c:	f2 4c       	sbci	r31, 0xC2	; 194
 15e:	01 90       	ld	r0, Z+
 160:	f0 81       	ld	r31, Z
 162:	e0 2d       	mov	r30, r0
 164:	09 95       	icall
 166:	8d 83       	std	Y+5, r24	; 0x05
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <system_init>:
uint8_t bytes[] = {	OLATA0, 0x67	}; // Need to initialise expander IO port before this will work. IODRA, 0x00

uint8_t system_init() 
{
	/*	GPIO	*/
	PORTC.DIRSET = PIN0_bm; // Set onboard LED as output
 18e:	e0 e4       	ldi	r30, 0x40	; 64
 190:	f4 e0       	ldi	r31, 0x04	; 4
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	81 83       	std	Z+1, r24	; 0x01
	PORTC.PIN5CTRL = PORT_ISC_FALLING_gc; // Interrupt on button down
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	85 8b       	std	Z+21, r24	; 0x15
	PORTB.DIRSET = PIN2_bm | PIN3_bm;
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
	PORTA.DIRSET = PIN1_bm | PIN2_bm;
 1a0:	e0 e0       	ldi	r30, 0x00	; 0
 1a2:	f4 e0       	ldi	r31, 0x04	; 4
 1a4:	96 e0       	ldi	r25, 0x06	; 6
 1a6:	91 83       	std	Z+1, r25	; 0x01
	PORTA.DIRSET = PIN4_bm | PIN5_bm | PIN6_bm;
 1a8:	90 e7       	ldi	r25, 0x70	; 112
 1aa:	91 83       	std	Z+1, r25	; 0x01

	/*	TIMER/COUNTER A	*/
	TCA0.SINGLE.PERL = 0xB7;
 1ac:	e0 e0       	ldi	r30, 0x00	; 0
 1ae:	fa e0       	ldi	r31, 0x0A	; 10
 1b0:	97 eb       	ldi	r25, 0xB7	; 183
 1b2:	96 a3       	std	Z+38, r25	; 0x26
	TCA0.SINGLE.PERH = 0x0C;
 1b4:	87 a3       	std	Z+39, r24	; 0x27
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_OVF_bm;
 1b6:	82 85       	ldd	r24, Z+10	; 0x0a
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_CLKSEL_DIV1024_gc;
 1bc:	80 81       	ld	r24, Z
 1be:	8e 60       	ori	r24, 0x0E	; 14
 1c0:	80 83       	st	Z, r24
	
	/*	I/O Lines	*/
	PORTMUX.CTRLB = PORTMUX_TWI0_ALTERNATE_gc | PORTMUX_SPI0_ALTERNATE_gc | PORTMUX_USART0_DEFAULT_gc;
 1c2:	84 e1       	ldi	r24, 0x14	; 20
 1c4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	
	/*	Interrupts	*/
	SREG |= CPU_I_bm;
 1c8:	8f b7       	in	r24, 0x3f	; 63
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	8f bf       	out	0x3f, r24	; 63
	
	i2c_master_init();
 1ce:	7a df       	rcall	.-268    	; 0xc4 <i2c_master_init>
	
	return 0;
}
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret

000001d4 <main>:

int main(void)
{
	system_init();
 1d4:	dc df       	rcall	.-72     	; 0x18e <system_init>
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <main+0x2>

000001d8 <__vector_5>:
		
    }
}

ISR(PORTC_PORT_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	uint8_t intflags = PORTC.INTFLAGS;
 1fa:	e0 e4       	ldi	r30, 0x40	; 64
 1fc:	f4 e0       	ldi	r31, 0x04	; 4
 1fe:	81 85       	ldd	r24, Z+9	; 0x09
	PORTC.INTFLAGS = intflags;
 200:	81 87       	std	Z+9, r24	; 0x09
	// Debug	
	PORTC.OUTTGL = PIN0_bm; 
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	87 83       	std	Z+7, r24	; 0x07
	
	i2c_set_buffer(bytes, 2);
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	9e e3       	ldi	r25, 0x3E	; 62
 20c:	54 df       	rcall	.-344    	; 0xb6 <i2c_set_buffer>
	i2c_start(SLAVE1_ADDR, I2C_WRITE_bm);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	6f df       	rcall	.-290    	; 0xf2 <i2c_start>
	bytes[1] = bytes[1] >> 7 | bytes[1] << 1;
 214:	ee e0       	ldi	r30, 0x0E	; 14
 216:	fe e3       	ldi	r31, 0x3E	; 62
 218:	81 81       	ldd	r24, Z+1	; 0x01
 21a:	88 0f       	add	r24, r24
 21c:	81 1d       	adc	r24, r1
 21e:	81 83       	std	Z+1, r24	; 0x01
	
	// Clear GPIO and setup timer for debug
	TCA0.SINGLE.CTRLESET |= TCA_SPLIT_CMD_RESTART_gc;
 220:	e0 e0       	ldi	r30, 0x00	; 0
 222:	fa e0       	ldi	r31, 0x0A	; 10
 224:	85 81       	ldd	r24, Z+5	; 0x05
 226:	88 60       	ori	r24, 0x08	; 8
 228:	85 83       	std	Z+5, r24	; 0x05
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 22a:	80 81       	ld	r24, Z
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	80 83       	st	Z, r24
	VPORTA.OUT &= ~(PIN4_bm | PIN5_bm | PIN6_bm);
 230:	81 b1       	in	r24, 0x01	; 1
 232:	8f 78       	andi	r24, 0x8F	; 143
 234:	81 b9       	out	0x01, r24	; 1
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_8>:

ISR(TCA0_OVF_vect) {
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	TCA0.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	fa e0       	ldi	r31, 0x0A	; 10
 26c:	83 85       	ldd	r24, Z+11	; 0x0b
 26e:	81 60       	ori	r24, 0x01	; 1
 270:	83 87       	std	Z+11, r24	; 0x0b
	TCA0.SINGLE.CTRLA &= ~TCA_SINGLE_ENABLE_bm;
 272:	80 81       	ld	r24, Z
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	80 83       	st	Z, r24
	VPORTA.OUT &= ~(PIN4_bm | PIN5_bm | PIN6_bm);
 278:	81 b1       	in	r24, 0x01	; 1
 27a:	8f 78       	andi	r24, 0x8F	; 143
 27c:	81 b9       	out	0x01, r24	; 1
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
