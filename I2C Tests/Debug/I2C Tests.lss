
I2C Tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00803e00  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00803e14  00803e14  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002240  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001891  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005de  00000000  00000000  00003f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00004514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ba  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  00005aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00005cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	0f c1       	rjmp	.+542    	; 0x22a <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	94 c0       	rjmp	.+296    	; 0x152 <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e8 e9       	ldi	r30, 0x98	; 152
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a4 e1       	ldi	r26, 0x14	; 20
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 31       	cpi	r26, 0x1A	; 26
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	d8 d0       	rcall	.+432    	; 0x218 <main>
  68:	15 c1       	rjmp	.+554    	; 0x294 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_M_IDLE>:
	------------------------------------------------------------------------------------------------	*/

static i2c_states_t I2C_M_IDLE(void)
{
	return I2C_IDLE;
}
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	08 95       	ret

00000070 <I2C_M_START>:
	// On receiving ACK/NACK (if arbitration not lost) SCL held low and CLKHOLD and WIF set.
	// If bus already owned, repeat start generated. (ACK/NACK sent first if previous operation was read)
	// For read command RIF is set after byte received.
	// Writes to MSTATUS clear flags (CHECK).
	
	i2c_fsm.byte_count = 0;
  70:	e4 e1       	ldi	r30, 0x14	; 20
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	14 82       	std	Z+4, r1	; 0x04
	TWI0.MADDR = i2c_fsm.slave_addr;
  76:	80 81       	ld	r24, Z
  78:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
		
	return (i2c_fsm.slave_addr & I2C_READ_bm) ? I2C_RX_BYTE : I2C_TX_BYTE;
  7c:	80 fd       	sbrc	r24, 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <I2C_M_START+0x14>
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	08 95       	ret
  84:	85 e0       	ldi	r24, 0x05	; 5
}
  86:	08 95       	ret

00000088 <I2C_M_STOP>:

static i2c_states_t I2C_M_STOP(void)
{
	// Executes ACK/NACK followed by stop condition. Set ACK/NACK as well for read.
	TWI0.MCTRLB	|= TWI_MCMD_STOP_gc;
  88:	e0 e1       	ldi	r30, 0x10	; 16
  8a:	f8 e0       	ldi	r31, 0x08	; 8
  8c:	84 81       	ldd	r24, Z+4	; 0x04
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	84 83       	std	Z+4, r24	; 0x04
	
	return I2C_IDLE;
}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	08 95       	ret

00000096 <I2C_M_RESET>:

static i2c_states_t I2C_M_RESET(void)
{
	TWI0.MCTRLB |= TWI_FLUSH_bm;
  96:	e0 e1       	ldi	r30, 0x10	; 16
  98:	f8 e0       	ldi	r31, 0x08	; 8
  9a:	84 81       	ldd	r24, Z+4	; 0x04
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	84 83       	std	Z+4, r24	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
  a0:	85 81       	ldd	r24, Z+5	; 0x05
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	85 83       	std	Z+5, r24	; 0x05
	
	return I2C_IDLE;
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret

000000aa <I2C_M_TX>:
static i2c_states_t I2C_M_TX(void)
{
	// MDATA Read/Write only available during CLKHOLD.
	// Write to MDATA forces transmit, ignores ACKACT
	// MDATA read/write clears interrupt flags, but not ARBLOST or BUSERR
	TWI0.MDATA = *(i2c_fsm.byte_array + i2c_fsm.byte_count);
  aa:	e4 e1       	ldi	r30, 0x14	; 20
  ac:	fe e3       	ldi	r31, 0x3E	; 62
  ae:	84 81       	ldd	r24, Z+4	; 0x04
  b0:	a1 81       	ldd	r26, Z+1	; 0x01
  b2:	b2 81       	ldd	r27, Z+2	; 0x02
  b4:	a8 0f       	add	r26, r24
  b6:	b1 1d       	adc	r27, r1
  b8:	9c 91       	ld	r25, X
  ba:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
	i2c_fsm.byte_count ++;
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	84 83       	std	Z+4, r24	; 0x04
	
	return (i2c_fsm.byte_count >= i2c_fsm.size_byte_array) ? I2C_STOP : I2C_TX_BYTE;
  c2:	93 81       	ldd	r25, Z+3	; 0x03
  c4:	89 17       	cp	r24, r25
  c6:	10 f4       	brcc	.+4      	; 0xcc <I2C_M_TX+0x22>
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	08 95       	ret
  cc:	82 e0       	ldi	r24, 0x02	; 2
}
  ce:	08 95       	ret

000000d0 <I2C_M_RX>:

static i2c_states_t I2C_M_RX(void)
{
	// To send NACK, set ACKACT in MCTRLB to 1
	*(i2c_fsm.byte_array + i2c_fsm.byte_count) = TWI0.MDATA;
  d0:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
  d4:	e4 e1       	ldi	r30, 0x14	; 20
  d6:	fe e3       	ldi	r31, 0x3E	; 62
  d8:	94 81       	ldd	r25, Z+4	; 0x04
  da:	a1 81       	ldd	r26, Z+1	; 0x01
  dc:	b2 81       	ldd	r27, Z+2	; 0x02
  de:	a9 0f       	add	r26, r25
  e0:	b1 1d       	adc	r27, r1
  e2:	8c 93       	st	X, r24
	i2c_fsm.byte_count ++;
  e4:	84 81       	ldd	r24, Z+4	; 0x04
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	84 83       	std	Z+4, r24	; 0x04
	
	return (i2c_fsm.byte_count >= i2c_fsm.size_byte_array) ? I2C_STOP : I2C_RX_BYTE;
  ea:	93 81       	ldd	r25, Z+3	; 0x03
  ec:	89 17       	cp	r24, r25
  ee:	10 f4       	brcc	.+4      	; 0xf4 <I2C_M_RX+0x24>
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	08 95       	ret
  f4:	82 e0       	ldi	r24, 0x02	; 2
}
  f6:	08 95       	ret

000000f8 <I2C_M_RX_NACK>:

static i2c_states_t I2C_M_RX_NACK(void)
{
	// No distinction between DATA/ADDR fail
	return I2C_M_STOP();
  f8:	c7 df       	rcall	.-114    	; 0x88 <I2C_M_STOP>
}
  fa:	08 95       	ret

000000fc <I2C_M_ARB_LOST>:
//	-	NACK
//	-	Start/Repeat Start
// Need to abort or re-send start (MADDR), re-send for now. Write to MADDR will clear flag.
static i2c_states_t I2C_M_ARB_LOST(void)
{
	return I2C_M_STOP();
  fc:	c5 df       	rcall	.-118    	; 0x88 <I2C_M_STOP>
}
  fe:	08 95       	ret

00000100 <I2C_M_BUS_ERR>:
// BUS ERROR
// S/Sr/P violation
// Reset peripheral and Re-send. MADDR clears BUSERR flag.
static i2c_states_t I2C_M_BUS_ERR(void)
{
	return I2C_M_STOP();
 100:	c3 df       	rcall	.-122    	; 0x88 <I2C_M_STOP>
}
 102:	08 95       	ret

00000104 <i2c_state_isr>:
	I2C_M_ARB_LOST,
	I2C_M_BUS_ERR
};

void i2c_state_isr (void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
	// WIF set on write completion, regardless of error
	// Check ARBLOST in multi-master environment.
	// Read triggers ACK/NACK and one byte read. RIF then set, WIF on error.
	// TWI0.MSTATUS |= TWI_WIF_bm | TWI_RIF_bm; // Not required. Cleared by state machine operations.	
	
	if (TWI0.MSTATUS & TWI_RXACK_bm) // NACK received
 108:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 10c:	84 ff       	sbrs	r24, 4
 10e:	03 c0       	rjmp	.+6      	; 0x116 <i2c_state_isr+0x12>
	{
		i2c_fsm.state = I2C_NACK;
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <__data_end+0x5>
	}
	
	if (TWI0.MSTATUS & TWI_ARBLOST_bm)
 116:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 11a:	83 ff       	sbrs	r24, 3
 11c:	03 c0       	rjmp	.+6      	; 0x124 <i2c_state_isr+0x20>
	{
		i2c_fsm.state = I2C_ARB_ERR;
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <__data_end+0x5>
	}
	
	if(TWI0.MSTATUS & TWI_BUSERR_bm)
 124:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 128:	82 ff       	sbrs	r24, 2
 12a:	03 c0       	rjmp	.+6      	; 0x132 <i2c_state_isr+0x2e>
	{
		i2c_fsm.state = I2C_BUS_ERR;
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	80 93 19 3e 	sts	0x3E19, r24	; 0x803e19 <__data_end+0x5>
	}
	
	i2c_fsm.state = state_callbacks[i2c_fsm.state]();
 132:	c4 e1       	ldi	r28, 0x14	; 20
 134:	de e3       	ldi	r29, 0x3E	; 62
 136:	ed 81       	ldd	r30, Y+5	; 0x05
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	f2 4c       	sbci	r31, 0xC2	; 194
 142:	01 90       	ld	r0, Z+
 144:	f0 81       	ld	r31, Z
 146:	e0 2d       	mov	r30, r0
 148:	09 95       	icall
 14a:	8d 83       	std	Y+5, r24	; 0x05
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <__vector_20>:
/*	------------------------------------------------------------------------------------------------
	INTERRUPTS
	------------------------------------------------------------------------------------------------	*/

ISR(TWI0_TWIM_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	// Bus is IDLE, OWNER, BUSY or UNDEFINED. Errors are ARBLOST and BUSERR
	// ARBLOST fails at any point on packet transmission, start -> NACK
	// For ARBLOST must restart (write to MADDR). MADDR write clears ARBLOST flag.
	// BUSERR is an illegal condition (e.g. Start followed by Stop). MADDR write clears BUSERR flag.
	
	i2c_state_isr();
 174:	c7 df       	rcall	.-114    	; 0x104 <i2c_state_isr>
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <i2c_set_buffer>:
	
	------------------------------------------------------------------------------------------------	*/

void i2c_set_buffer(uint8_t *buff, uint8_t size)
{
	i2c_fsm.byte_array = buff;
 198:	e4 e1       	ldi	r30, 0x14	; 20
 19a:	fe e3       	ldi	r31, 0x3E	; 62
 19c:	81 83       	std	Z+1, r24	; 0x01
 19e:	92 83       	std	Z+2, r25	; 0x02
	i2c_fsm.size_byte_array = size;
 1a0:	63 83       	std	Z+3, r22	; 0x03
	i2c_fsm.byte_count = 0;
 1a2:	14 82       	std	Z+4, r1	; 0x04
 1a4:	08 95       	ret

000001a6 <i2c_master_init>:
}

void i2c_master_init()
{
	// Peripheral controls
	TWI0.CTRLA = TWI_SDASETUP_4CYC_gc | TWI_SDAHOLD_OFF_gc; // FMPEN (fast mode) set to zero
 1a6:	e0 e1       	ldi	r30, 0x10	; 16
 1a8:	f8 e0       	ldi	r31, 0x08	; 8
 1aa:	10 82       	st	Z, r1
	TWI0.DBGCTRL = TWI_DBGRUN_bm; // Keep peripheral running during debug mode
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	82 83       	std	Z+2, r24	; 0x02
	// I2C Master controls
	TWI0.MBAUD = 0x0B; // Derives SCL hi/lo times. (See data sheet for equation) Write while ENABLE bit in TWI.MCTRLA is '0
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_TIMEOUT_DISABLED_gc | TWI_ENABLE_bm; // Quick command and smart mode not in use
 1b4:	81 ec       	ldi	r24, 0xC1	; 193
 1b6:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MCTRLB &= ~TWI_ACKACT_bm; // 0 send ACK, 1 send NACK when data read or execute command written to CMD bits
 1b8:	84 81       	ldd	r24, Z+4	; 0x04
 1ba:	8b 7f       	andi	r24, 0xFB	; 251
 1bc:	84 83       	std	Z+4, r24	; 0x04
	TWI0_MCTRLB |= TWI_FLUSH_bm;
 1be:	a4 e1       	ldi	r26, 0x14	; 20
 1c0:	b8 e0       	ldi	r27, 0x08	; 8
 1c2:	8c 91       	ld	r24, X
 1c4:	88 60       	ori	r24, 0x08	; 8
 1c6:	8c 93       	st	X, r24
	
	// !!ASSUMES BUS IS IDLE, SHOULD CHECK LINES ARE GOOD!!
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
 1c8:	85 81       	ldd	r24, Z+5	; 0x05
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 83       	std	Z+5, r24	; 0x05
	i2c_fsm.state = I2C_IDLE;
 1ce:	10 92 19 3e 	sts	0x3E19, r1	; 0x803e19 <__data_end+0x5>
 1d2:	08 95       	ret

000001d4 <i2c_start>:
	
	// SHOULD RETURN SUCCESS/FAIL?
}

void i2c_start (uint8_t addr, uint8_t read_write) {
	if (i2c_fsm.state == I2C_IDLE)
 1d4:	90 91 19 3e 	lds	r25, 0x3E19	; 0x803e19 <__data_end+0x5>
 1d8:	91 11       	cpse	r25, r1
 1da:	08 c0       	rjmp	.+16     	; 0x1ec <i2c_start+0x18>
	{
		i2c_fsm.slave_addr = addr<<1 | read_write;
 1dc:	e4 e1       	ldi	r30, 0x14	; 20
 1de:	fe e3       	ldi	r31, 0x3E	; 62
 1e0:	88 0f       	add	r24, r24
 1e2:	68 2b       	or	r22, r24
 1e4:	60 83       	st	Z, r22
		i2c_fsm.state = I2C_START;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	85 83       	std	Z+5, r24	; 0x05
		
		i2c_state_isr();
 1ea:	8c df       	rcall	.-232    	; 0x104 <i2c_state_isr>
 1ec:	08 95       	ret

000001ee <system_init>:
uint8_t bytes[] = {	OLATA0, 0x67	}; // Need to initialise expander IO port before this will work. IODRA, 0x00

uint8_t system_init() 
{
	/*	GPIO	*/
	PORTC.DIRSET = PIN0_bm; // Set onboard LED as output
 1ee:	e0 e4       	ldi	r30, 0x40	; 64
 1f0:	f4 e0       	ldi	r31, 0x04	; 4
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.PIN5CTRL = PORT_ISC_FALLING_gc; // Interrupt on button down
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	85 8b       	std	Z+21, r24	; 0x15
	PORTB.DIRSET = PIN2_bm | PIN3_bm;  // UART
 1fa:	8c e0       	ldi	r24, 0x0C	; 12
 1fc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
	PORTA.DIRSET = PIN1_bm | PIN2_bm;	// TWI
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x700401>
	
	/*	I/O Lines	*/
	PORTMUX.CTRLB = PORTMUX_TWI0_ALTERNATE_gc | PORTMUX_SPI0_ALTERNATE_gc | PORTMUX_USART0_DEFAULT_gc;
 206:	84 e1       	ldi	r24, 0x14	; 20
 208:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	
	/*	Interrupts	*/
	SREG |= CPU_I_bm;
 20c:	8f b7       	in	r24, 0x3f	; 63
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8f bf       	out	0x3f, r24	; 63
	
	i2c_master_init();
 212:	c9 df       	rcall	.-110    	; 0x1a6 <i2c_master_init>
	
	return 0;
}
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret

00000218 <main>:

int main(void)
{
	system_init();
 218:	ea df       	rcall	.-44     	; 0x1ee <system_init>
	
	// Should use (const unint8_t *) for EEPROM.
	i2c_set_buffer((uint8_t *)0x1400, 2);
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	94 e1       	ldi	r25, 0x14	; 20
 220:	bb df       	rcall	.-138    	; 0x198 <i2c_set_buffer>
	i2c_start(SLAVE1_ADDR, I2C_WRITE_bm);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	d6 df       	rcall	.-84     	; 0x1d4 <i2c_start>
 228:	ff cf       	rjmp	.-2      	; 0x228 <main+0x10>

0000022a <__vector_5>:
		
    }
}

ISR(PORTC_PORT_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	uint8_t intflags = PORTC.INTFLAGS;
 24c:	e0 e4       	ldi	r30, 0x40	; 64
 24e:	f4 e0       	ldi	r31, 0x04	; 4
 250:	81 85       	ldd	r24, Z+9	; 0x09
	PORTC.INTFLAGS = intflags;
 252:	81 87       	std	Z+9, r24	; 0x09
	// Debug
	PORTC.OUTTGL = PIN0_bm;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	87 83       	std	Z+7, r24	; 0x07
	
	i2c_set_buffer(bytes, 2);
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	82 e1       	ldi	r24, 0x12	; 18
 25c:	9e e3       	ldi	r25, 0x3E	; 62
 25e:	9c df       	rcall	.-200    	; 0x198 <i2c_set_buffer>
	i2c_start(SLAVE1_ADDR, I2C_WRITE_bm);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	80 e2       	ldi	r24, 0x20	; 32
 264:	b7 df       	rcall	.-146    	; 0x1d4 <i2c_start>
	bytes[1] = bytes[1] >> 7 | bytes[1] << 1;
 266:	e2 e1       	ldi	r30, 0x12	; 18
 268:	fe e3       	ldi	r31, 0x3E	; 62
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	88 0f       	add	r24, r24
 26e:	81 1d       	adc	r24, r1
 270:	81 83       	std	Z+1, r24	; 0x01
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
