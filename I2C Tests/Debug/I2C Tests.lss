
I2C Tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00803e00  00000700  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000012  000086ee  000006ee  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000023  00803e1a  00803e1a  000007ce  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000007ce  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f14  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c7b  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000be2  00000000  00000000  0000556b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000047c  00000000  00000000  00006150  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000016b6  00000000  00000000  000065cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006d2  00000000  00000000  00007c82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  00008354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	ef c1       	rjmp	.+990    	; 0x3e6 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	14 c2       	rjmp	.+1064   	; 0x434 <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	bd c0       	rjmp	.+378    	; 0x1a4 <__vector_20>
  2a:	d5 c2       	rjmp	.+1450   	; 0x5d6 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e0 e0       	ldi	r30, 0x00	; 0
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 31       	cpi	r26, 0x1A	; 26
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	aa e1       	ldi	r26, 0x1A	; 26
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 33       	cpi	r26, 0x3D	; 61
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	a6 d1       	rcall	.+844    	; 0x3b4 <main>
  68:	40 c3       	rjmp	.+1664   	; 0x6ea <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_M_IDLE>:
	------------------------------------------------------------------------------------------------	*/

static i2c_states_t I2C_M_IDLE(void)
{
	return I2C_IDLE;
}
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	08 95       	ret

00000070 <I2C_M_START>:
	// On receiving ACK/NACK (if arbitration not lost) SCL held low and CLKHOLD and WIF set.
	// If bus already owned, repeat start generated. (ACK/NACK sent first if previous operation was read)
	// For read command RIF is set after byte received.
	// Writes to MSTATUS clear flags (CHECK).
	
	i2c_fsm.byte_count = 0;
  70:	ea e1       	ldi	r30, 0x1A	; 26
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	14 82       	std	Z+4, r1	; 0x04
	i2c_fsm.nack_check = 1;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MADDR = i2c_fsm.slave_addr;
  7a:	80 81       	ld	r24, Z
  7c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
		
	return (i2c_fsm.slave_addr & I2C_READ_bm) ? I2C_RX_BYTE : I2C_TX_BYTE;
  80:	80 fd       	sbrc	r24, 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <I2C_M_START+0x18>
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	08 95       	ret
  88:	85 e0       	ldi	r24, 0x05	; 5
}
  8a:	08 95       	ret

0000008c <I2C_M_STOP>:
	//return I2C_M_START();
}*/

static i2c_states_t I2C_M_STOP(void)
{
	TWI0.MCTRLB	|= TWI_MCMD_STOP_gc | TWI_ACKACT_bm; // NACK used for RX STOP condition
  8c:	e0 e1       	ldi	r30, 0x10	; 16
  8e:	f8 e0       	ldi	r31, 0x08	; 8
  90:	84 81       	ldd	r24, Z+4	; 0x04
  92:	87 60       	ori	r24, 0x07	; 7
  94:	84 83       	std	Z+4, r24	; 0x04
	
	return I2C_IDLE;
}
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret

0000009a <I2C_M_RESET>:

static i2c_states_t I2C_M_RESET(void)
{
	TWI0.MCTRLB |= TWI_FLUSH_bm;
  9a:	e0 e1       	ldi	r30, 0x10	; 16
  9c:	f8 e0       	ldi	r31, 0x08	; 8
  9e:	84 81       	ldd	r24, Z+4	; 0x04
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	84 83       	std	Z+4, r24	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
  a4:	85 81       	ldd	r24, Z+5	; 0x05
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	85 83       	std	Z+5, r24	; 0x05
	
	return I2C_IDLE;
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret

000000ae <I2C_M_TX>:

static i2c_states_t I2C_M_TX(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	i2c_states_t next_state = I2C_TX_BYTE;
	
	// MDATA Read/Write only available during CLKHOLD.
	// Write to MDATA forces transmit, ignores ACKACT
	// MDATA read/write clears interrupt flags, but not ARBLOST or BUSERR
	if (i2c_fsm.byte_count < i2c_fsm.size_byte_array)
  b2:	ea e1       	ldi	r30, 0x1A	; 26
  b4:	fe e3       	ldi	r31, 0x3E	; 62
  b6:	84 81       	ldd	r24, Z+4	; 0x04
  b8:	93 81       	ldd	r25, Z+3	; 0x03
  ba:	89 17       	cp	r24, r25
  bc:	58 f4       	brcc	.+22     	; 0xd4 <I2C_M_TX+0x26>
	{
		TWI0.MDATA = *(i2c_fsm.byte_array + i2c_fsm.byte_count);
  be:	e0 91 1b 3e 	lds	r30, 0x3E1B	; 0x803e1b <__data_end+0x1>
  c2:	f0 91 1c 3e 	lds	r31, 0x3E1C	; 0x803e1c <__data_end+0x2>
  c6:	e8 0f       	add	r30, r24
  c8:	f1 1d       	adc	r31, r1
  ca:	80 81       	ld	r24, Z
  cc:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
	return I2C_IDLE;
}

static i2c_states_t I2C_M_TX(void)
{
	i2c_states_t next_state = I2C_TX_BYTE;
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <I2C_M_TX+0x36>
	{
		TWI0.MDATA = *(i2c_fsm.byte_array + i2c_fsm.byte_count);
	}
	else
	{
		i2c_fsm.trx_complete();
  d4:	ca e1       	ldi	r28, 0x1A	; 26
  d6:	de e3       	ldi	r29, 0x3E	; 62
  d8:	ef 81       	ldd	r30, Y+7	; 0x07
  da:	f8 85       	ldd	r31, Y+8	; 0x08
  dc:	09 95       	icall
		next_state = i2c_fsm.end_state();
  de:	e9 85       	ldd	r30, Y+9	; 0x09
  e0:	fa 85       	ldd	r31, Y+10	; 0x0a
  e2:	09 95       	icall
	}

	i2c_fsm.byte_count++;
  e4:	ea e1       	ldi	r30, 0x1A	; 26
  e6:	fe e3       	ldi	r31, 0x3E	; 62
  e8:	94 81       	ldd	r25, Z+4	; 0x04
  ea:	9f 5f       	subi	r25, 0xFF	; 255
  ec:	94 83       	std	Z+4, r25	; 0x04
	
	return next_state;
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <I2C_M_RX>:

static i2c_states_t I2C_M_RX(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
	// Error caught in ISR routine, for TX/RX select send byte, restart or stop.
	i2c_states_t next_state = I2C_RX_BYTE;
	i2c_fsm.nack_check = 0;
  f8:	ea e1       	ldi	r30, 0x1A	; 26
  fa:	fe e3       	ldi	r31, 0x3E	; 62
  fc:	16 82       	std	Z+6, r1	; 0x06
	*(i2c_fsm.byte_array + i2c_fsm.byte_count) = TWI0.MDATA;
  fe:	84 81       	ldd	r24, Z+4	; 0x04
 100:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
 104:	a1 81       	ldd	r26, Z+1	; 0x01
 106:	b2 81       	ldd	r27, Z+2	; 0x02
 108:	a8 0f       	add	r26, r24
 10a:	b1 1d       	adc	r27, r1
 10c:	9c 93       	st	X, r25
	i2c_fsm.byte_count ++;
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	84 83       	std	Z+4, r24	; 0x04
	
	if (i2c_fsm.byte_count < i2c_fsm.size_byte_array)
 112:	93 81       	ldd	r25, Z+3	; 0x03
 114:	89 17       	cp	r24, r25
 116:	50 f4       	brcc	.+20     	; 0x12c <I2C_M_RX+0x38>
	{
		// To send NACK, set ACKACT in MCTRLB to 1
		TWI0.MCTRLB &= ~TWI_ACKACT_bm; // Send ACK
 118:	e0 e1       	ldi	r30, 0x10	; 16
 11a:	f8 e0       	ldi	r31, 0x08	; 8
 11c:	84 81       	ldd	r24, Z+4	; 0x04
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	84 83       	std	Z+4, r24	; 0x04
		TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc; // Need to manually trigger this.	
 122:	84 81       	ldd	r24, Z+4	; 0x04
 124:	82 60       	ori	r24, 0x02	; 2
 126:	84 83       	std	Z+4, r24	; 0x04
}

static i2c_states_t I2C_M_RX(void)
{
	// Error caught in ISR routine, for TX/RX select send byte, restart or stop.
	i2c_states_t next_state = I2C_RX_BYTE;
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	08 c0       	rjmp	.+16     	; 0x13c <I2C_M_RX+0x48>
		TWI0.MCTRLB &= ~TWI_ACKACT_bm; // Send ACK
		TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc; // Need to manually trigger this.	
	}
	else
	{
		i2c_fsm.trx_complete();
 12c:	ca e1       	ldi	r28, 0x1A	; 26
 12e:	de e3       	ldi	r29, 0x3E	; 62
 130:	ef 81       	ldd	r30, Y+7	; 0x07
 132:	f8 85       	ldd	r31, Y+8	; 0x08
 134:	09 95       	icall
		next_state = i2c_fsm.end_state();
 136:	e9 85       	ldd	r30, Y+9	; 0x09
 138:	fa 85       	ldd	r31, Y+10	; 0x0a
 13a:	09 95       	icall
	}
	
	return next_state;
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <I2C_M_RX_NACK>:

static i2c_states_t I2C_M_RX_NACK(void)
{
	// No distinction between DATA/ADDR fail
	return I2C_M_STOP();
 142:	a4 df       	rcall	.-184    	; 0x8c <I2C_M_STOP>
}
 144:	08 95       	ret

00000146 <I2C_M_ARB_LOST>:
// ARBITRATION ERROR
// Can lose arbitration during high data, NACK or start/repeat start.
// Need to abort or re-send start (MADDR). Write to MADDR will clear flag.
static i2c_states_t I2C_M_ARB_LOST(void)
{
	return I2C_M_STOP();
 146:	a2 df       	rcall	.-188    	; 0x8c <I2C_M_STOP>
}
 148:	08 95       	ret

0000014a <I2C_M_BUS_ERR>:
// BUS ERROR
// S/Sr/P violation
// Reset peripheral and Re-send. MADDR clears BUSERR flag.
static i2c_states_t I2C_M_BUS_ERR(void)
{
	return I2C_M_RESET();
 14a:	a7 df       	rcall	.-178    	; 0x9a <I2C_M_RESET>
}
 14c:	08 95       	ret

0000014e <i2c_state_isr>:
	I2C_M_ARB_LOST,
	I2C_M_BUS_ERR
};

static void i2c_state_isr (void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	// Check ARBLOST in multi-master environment.
	// Read triggers ACK/NACK and one byte read. RIF then set, WIF on error.
	// TWI0.MSTATUS |= TWI_WIF_bm | TWI_RIF_bm; // Not required. Cleared by state machine operations.	
	
// PROBLEM: STALLS ON NACK SIGNAL. SHOULD ONLY BE CHECKING THIS AFTER START OR BYTE TX //
	if (i2c_fsm.nack_check && (TWI0.MSTATUS & TWI_RXACK_bm)) // NACK received
 152:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <__data_end+0x6>
 156:	88 23       	and	r24, r24
 158:	39 f0       	breq	.+14     	; 0x168 <i2c_state_isr+0x1a>
 15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 15e:	84 ff       	sbrs	r24, 4
 160:	03 c0       	rjmp	.+6      	; 0x168 <i2c_state_isr+0x1a>
	{
		i2c_fsm.state = I2C_NACK;
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__data_end+0x5>
	}
	
	if (TWI0.MSTATUS & TWI_ARBLOST_bm)
 168:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 16c:	83 ff       	sbrs	r24, 3
 16e:	03 c0       	rjmp	.+6      	; 0x176 <i2c_state_isr+0x28>
	{
		i2c_fsm.state = I2C_ARB_ERR;
 170:	87 e0       	ldi	r24, 0x07	; 7
 172:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__data_end+0x5>
	}
	
	if(TWI0.MSTATUS & TWI_BUSERR_bm)
 176:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 17a:	82 ff       	sbrs	r24, 2
 17c:	03 c0       	rjmp	.+6      	; 0x184 <i2c_state_isr+0x36>
	{
		i2c_fsm.state = I2C_BUS_ERR;
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__data_end+0x5>
	}
	
	i2c_fsm.state = state_callbacks[i2c_fsm.state]();
 184:	ca e1       	ldi	r28, 0x1A	; 26
 186:	de e3       	ldi	r29, 0x3E	; 62
 188:	ed 81       	ldd	r30, Y+5	; 0x05
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e2 51       	subi	r30, 0x12	; 18
 192:	f9 47       	sbci	r31, 0x79	; 121
 194:	01 90       	ld	r0, Z+
 196:	f0 81       	ld	r31, Z
 198:	e0 2d       	mov	r30, r0
 19a:	09 95       	icall
 19c:	8d 83       	std	Y+5, r24	; 0x05
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <__vector_20>:
/*	------------------------------------------------------------------------------------------------
	INTERRUPTS
	------------------------------------------------------------------------------------------------	*/

ISR(TWI0_TWIM_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	// Bus is IDLE, OWNER, BUSY or UNDEFINED. Errors are ARBLOST and BUSERR
	// ARBLOST fails at any point on packet transmission, start -> NACK
	// For ARBLOST must restart (write to MADDR). MADDR write clears ARBLOST flag.
	// BUSERR is an illegal condition (e.g. Start followed by Stop). MADDR write clears BUSERR flag.
	
	i2c_state_isr();
 1c6:	c3 df       	rcall	.-122    	; 0x14e <i2c_state_isr>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <i2c_master_init>:
	------------------------------------------------------------------------------------------------	*/

void i2c_master_init()
{
	// Peripheral controls
	TWI0.CTRLA = TWI_SDASETUP_4CYC_gc | TWI_SDAHOLD_OFF_gc | 0<<TWI_FMPEN_bp;
 1ea:	e0 e1       	ldi	r30, 0x10	; 16
 1ec:	f8 e0       	ldi	r31, 0x08	; 8
 1ee:	10 82       	st	Z, r1
	TWI0.DBGCTRL = TWI_DBGRUN_bm; // Keep peripheral running during debug mode
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	82 83       	std	Z+2, r24	; 0x02
	// I2C Master controls
	TWI0.MBAUD = I2C_BAUD; // Derives SCL hi/lo times. (See data sheet for equation) Write while ENABLE bit in TWI.MCTRLA is 0
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_TIMEOUT_DISABLED_gc | TWI_ENABLE_bm; // Quick command and smart mode not in use
 1f8:	81 ec       	ldi	r24, 0xC1	; 193
 1fa:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MCTRLB &= 0<<TWI_ACKACT_bp; // 0 send ACK, 1 send NACK when data read or execute command written to CMD bits
 1fc:	84 81       	ldd	r24, Z+4	; 0x04
 1fe:	14 82       	std	Z+4, r1	; 0x04
	TWI0_MCTRLB |= TWI_FLUSH_bm;
 200:	a4 e1       	ldi	r26, 0x14	; 20
 202:	b8 e0       	ldi	r27, 0x08	; 8
 204:	8c 91       	ld	r24, X
 206:	88 60       	ori	r24, 0x08	; 8
 208:	8c 93       	st	X, r24
	
	// ASSUMES BUS IS IDLE, SHOULD CHECK SDA/SCK LINES. (Port A 1&2 for alt. pin config)
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	
 20a:	85 81       	ldd	r24, Z+5	; 0x05
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	85 83       	std	Z+5, r24	; 0x05

	i2c_fsm.state = I2C_IDLE;
 210:	10 92 1f 3e 	sts	0x3E1F, r1	; 0x803e1f <__data_end+0x5>
 214:	08 95       	ret

00000216 <i2c_set_stop>:
}

void i2c_set_stop()
{
	i2c_fsm.end_state = I2C_M_STOP;
 216:	86 e4       	ldi	r24, 0x46	; 70
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <__data_end+0x9>
 21e:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <__data_end+0xa>
 222:	08 95       	ret

00000224 <i2c_set_restart>:
}

void i2c_set_restart()
{
	i2c_fsm.end_state = I2C_M_START;
 224:	88 e3       	ldi	r24, 0x38	; 56
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <__data_end+0x9>
 22c:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <__data_end+0xa>
 230:	08 95       	ret

00000232 <i2c_set_buffer>:
}

void i2c_set_buffer(uint8_t slave_addr, uint8_t *data, uint8_t byte_count)
{
	i2c_fsm.slave_addr = slave_addr;
 232:	ea e1       	ldi	r30, 0x1A	; 26
 234:	fe e3       	ldi	r31, 0x3E	; 62
 236:	80 83       	st	Z, r24
	i2c_fsm.byte_array = data;
 238:	61 83       	std	Z+1, r22	; 0x01
 23a:	72 83       	std	Z+2, r23	; 0x02
	i2c_fsm.size_byte_array = byte_count;
 23c:	43 83       	std	Z+3, r20	; 0x03
 23e:	08 95       	ret

00000240 <i2c_start>:
void i2c_start (callback cb)
{
//	switch (i2c_fsm.state)
//	{
//		case I2C_IDLE :
	i2c_fsm.trx_complete = cb;
 240:	ea e1       	ldi	r30, 0x1A	; 26
 242:	fe e3       	ldi	r31, 0x3E	; 62
 244:	87 83       	std	Z+7, r24	; 0x07
 246:	90 87       	std	Z+8, r25	; 0x08
	i2c_fsm.state = I2C_START;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	85 83       	std	Z+5, r24	; 0x05
	i2c_fsm.nack_check = 0;
 24c:	16 82       	std	Z+6, r1	; 0x06
	i2c_fsm.state = I2C_IDLE;
}

void i2c_set_stop()
{
	i2c_fsm.end_state = I2C_M_STOP;
 24e:	86 e4       	ldi	r24, 0x46	; 70
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	81 87       	std	Z+9, r24	; 0x09
 254:	92 87       	std	Z+10, r25	; 0x0a
//		case I2C_IDLE :
	i2c_fsm.trx_complete = cb;
	i2c_fsm.state = I2C_START;
	i2c_fsm.nack_check = 0;
	i2c_set_stop();
	i2c_state_isr();
 256:	7b df       	rcall	.-266    	; 0x14e <i2c_state_isr>
 258:	08 95       	ret

0000025a <i2c_idle>:
//	}
}

uint8_t i2c_idle ()
{
	return i2c_fsm.state == I2C_IDLE;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <__data_end+0x5>
 260:	91 11       	cpse	r25, r1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret

00000266 <mcp_i2c_callback>:
	//picoPower 2b: Disable Tx pin in-between transmissions
}
	********************************		********************************	*/

void mcp_i2c_callback(void)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	// Called when TX/RX complete. Check data buffer and trigger restart if appropriate.
	if(Q_RW == 1)
 26e:	15 d1       	rcall	.+554    	; 0x49a <get_current_rw_flag>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	51 f4       	brne	.+20     	; 0x288 <mcp_i2c_callback+0x22>
	{
		i2c_tx_buffer[1] = i2c_rx_buffer;
 274:	80 91 29 3e 	lds	r24, 0x3E29	; 0x803e29 <i2c_rx_buffer>
 278:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <__data_start+0x1>
		add_to_msg_queue(I2C_ADDR_1, I2C_WRITE_bm, i2c_tx_buffer, 2);
 27c:	22 e0       	ldi	r18, 0x02	; 2
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	5e e3       	ldi	r21, 0x3E	; 62
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	82 d1       	rcall	.+772    	; 0x58c <add_to_msg_queue>
	}
	delete_from_msg_queue();
 288:	63 d1       	rcall	.+710    	; 0x550 <delete_from_msg_queue>
	if(get_msg_queue_status() != RB_EMPTY)
 28a:	2c d1       	rcall	.+600    	; 0x4e4 <get_msg_queue_status>
 28c:	88 23       	and	r24, r24
 28e:	71 f0       	breq	.+28     	; 0x2ac <mcp_i2c_callback+0x46>
	{
		i2c_set_buffer(Q_ADDR<<1 | Q_RW, Q_DATA, Q_DATA_LEN);
 290:	1e d1       	rcall	.+572    	; 0x4ce <get_current_data_length>
 292:	d8 2f       	mov	r29, r24
 294:	10 d1       	rcall	.+544    	; 0x4b6 <get_current_data_pointer>
 296:	8c 01       	movw	r16, r24
 298:	f4 d0       	rcall	.+488    	; 0x482 <get_current_address>
 29a:	c8 2f       	mov	r28, r24
 29c:	fe d0       	rcall	.+508    	; 0x49a <get_current_rw_flag>
 29e:	cc 0f       	add	r28, r28
 2a0:	4d 2f       	mov	r20, r29
 2a2:	b8 01       	movw	r22, r16
 2a4:	8c 2b       	or	r24, r28
 2a6:	c5 df       	rcall	.-118    	; 0x232 <i2c_set_buffer>
		i2c_set_restart();
 2a8:	bd df       	rcall	.-134    	; 0x224 <i2c_set_restart>
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <mcp_i2c_callback+0x48>
	}
	else
	{
		i2c_set_stop();
 2ac:	b4 df       	rcall	.-152    	; 0x216 <i2c_set_stop>
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <system_init>:
static uint8_t spi_bytes[SPI_BUFF_LENGTH];

uint8_t system_init(void) 
{
	/*	GPIO	*/
	PORTC.PIN5CTRL = PORT_ISC_FALLING_gc; // Interrupt on button down
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
	PORTB.DIRSET = PIN2_bm | PIN3_bm;  // UART
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
	PORTA.DIRSET = PIN1_bm | PIN2_bm;	// TWI
 2c4:	e0 e0       	ldi	r30, 0x00	; 0
 2c6:	f4 e0       	ldi	r31, 0x04	; 4
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	81 83       	std	Z+1, r24	; 0x01
	PORTA.PIN4CTRL = PORT_ISC_RISING_gc; // MCP PORTB interrupt (SPI)
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_RISING_gc; // MCP PORTB interrupt (I2C)
 2d0:	85 8b       	std	Z+21, r24	; 0x15
	
	/*	I/O Lines	*/
	PORTMUX.CTRLB = PORTMUX_TWI0_ALTERNATE_gc | PORTMUX_SPI0_ALTERNATE_gc | PORTMUX_USART0_DEFAULT_gc;
 2d2:	84 e1       	ldi	r24, 0x14	; 20
 2d4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
	
	/*	Interrupts	*/
	SREG |= CPU_I_bm;
 2d8:	8f b7       	in	r24, 0x3f	; 63
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	8f bf       	out	0x3f, r24	; 63
	
	spi_master_init();
 2de:	cf d1       	rcall	.+926    	; 0x67e <spi_master_init>
	i2c_master_init();
 2e0:	84 df       	rcall	.-248    	; 0x1ea <i2c_master_init>

	return 0;
}
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret

000002e6 <mcp_cycle_LEDS>:
		i2c_set_stop();
	}
}

void mcp_cycle_LEDS(void)
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	LED_test = LED_test >> 7 | LED_test << 1;
 2ee:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <LED_test>
 2f2:	88 0f       	add	r24, r24
 2f4:	81 1d       	adc	r24, r1
 2f6:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <LED_test>
	spi_bytes[0] =  SPI_ADDR<<1 | MCP23X17_WRITE;
 2fa:	e5 e2       	ldi	r30, 0x25	; 37
 2fc:	fe e3       	ldi	r31, 0x3E	; 62
 2fe:	90 e4       	ldi	r25, 0x40	; 64
 300:	90 83       	st	Z, r25
	spi_bytes[1] = PORTA_ADDR(OLAT, SEQ_ADDR);
 302:	94 e1       	ldi	r25, 0x14	; 20
 304:	91 83       	std	Z+1, r25	; 0x01
	spi_bytes[2] = LED_test;
 306:	82 83       	std	Z+2, r24	; 0x02
	spi_start(spi_bytes, spi_bytes, 3);
 308:	43 e0       	ldi	r20, 0x03	; 3
 30a:	bf 01       	movw	r22, r30
 30c:	cf 01       	movw	r24, r30
 30e:	cd d1       	rcall	.+922    	; 0x6aa <spi_start>

	// Buffer may be overwritten this way if queue is large. Use separate Read/Write buffers.
	i2c_tx_buffer[1] = LED_test;
 310:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <LED_test>
 314:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <__data_start+0x1>
	add_to_msg_queue(I2C_ADDR_1, I2C_WRITE_bm, i2c_tx_buffer, 2);
 318:	22 e0       	ldi	r18, 0x02	; 2
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	5e e3       	ldi	r21, 0x3E	; 62
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	34 d1       	rcall	.+616    	; 0x58c <add_to_msg_queue>
	
	if(i2c_idle())
 324:	9a df       	rcall	.-204    	; 0x25a <i2c_idle>
 326:	88 23       	and	r24, r24
 328:	79 f0       	breq	.+30     	; 0x348 <mcp_cycle_LEDS+0x62>
	{
		i2c_set_buffer(Q_ADDR<<1 | Q_RW, Q_DATA, Q_DATA_LEN);
 32a:	d1 d0       	rcall	.+418    	; 0x4ce <get_current_data_length>
 32c:	d8 2f       	mov	r29, r24
 32e:	c3 d0       	rcall	.+390    	; 0x4b6 <get_current_data_pointer>
 330:	8c 01       	movw	r16, r24
 332:	a7 d0       	rcall	.+334    	; 0x482 <get_current_address>
 334:	c8 2f       	mov	r28, r24
 336:	b1 d0       	rcall	.+354    	; 0x49a <get_current_rw_flag>
 338:	cc 0f       	add	r28, r28
 33a:	4d 2f       	mov	r20, r29
 33c:	b8 01       	movw	r22, r16
 33e:	8c 2b       	or	r24, r28
 340:	78 df       	rcall	.-272    	; 0x232 <i2c_set_buffer>
		i2c_start(mcp_i2c_callback);	
 342:	83 e3       	ldi	r24, 0x33	; 51
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	7c df       	rcall	.-264    	; 0x240 <i2c_start>
	}
	
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <mcp_read_inputs>:

void mcp_read_inputs(void)
{
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	spi_bytes[0] = SPI_ADDR<<1 | MCP23X17_READ;
 35a:	e5 e2       	ldi	r30, 0x25	; 37
 35c:	fe e3       	ldi	r31, 0x3E	; 62
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	80 83       	st	Z, r24
	spi_bytes[1] = PORTB_ADDR(INTCAP, SEQ_ADDR);
 362:	81 e1       	ldi	r24, 0x11	; 17
 364:	81 83       	std	Z+1, r24	; 0x01
	spi_start(spi_bytes, spi_bytes, 3);
 366:	43 e0       	ldi	r20, 0x03	; 3
 368:	bf 01       	movw	r22, r30
 36a:	cf 01       	movw	r24, r30
 36c:	9e d1       	rcall	.+828    	; 0x6aa <spi_start>
	
// I2C read requires write to select register, then restart to transfer.
	add_to_msg_queue(I2C_ADDR_1, I2C_WRITE_bm, &INTCAP_ADDR, 1);
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	40 e1       	ldi	r20, 0x10	; 16
 372:	5e e3       	ldi	r21, 0x3E	; 62
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	09 d1       	rcall	.+530    	; 0x58c <add_to_msg_queue>
	add_to_msg_queue(I2C_ADDR_1, I2C_READ_bm, &i2c_rx_buffer, 1);
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	49 e2       	ldi	r20, 0x29	; 41
 37e:	5e e3       	ldi	r21, 0x3E	; 62
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 e2       	ldi	r24, 0x20	; 32
 384:	03 d1       	rcall	.+518    	; 0x58c <add_to_msg_queue>
	
	if(i2c_idle())
 386:	69 df       	rcall	.-302    	; 0x25a <i2c_idle>
 388:	88 23       	and	r24, r24
 38a:	79 f0       	breq	.+30     	; 0x3aa <mcp_read_inputs+0x58>
	{
		i2c_set_buffer(Q_ADDR<<1 | Q_RW, Q_DATA, Q_DATA_LEN);
 38c:	a0 d0       	rcall	.+320    	; 0x4ce <get_current_data_length>
 38e:	d8 2f       	mov	r29, r24
 390:	92 d0       	rcall	.+292    	; 0x4b6 <get_current_data_pointer>
 392:	8c 01       	movw	r16, r24
 394:	76 d0       	rcall	.+236    	; 0x482 <get_current_address>
 396:	c8 2f       	mov	r28, r24
 398:	80 d0       	rcall	.+256    	; 0x49a <get_current_rw_flag>
 39a:	cc 0f       	add	r28, r28
 39c:	4d 2f       	mov	r20, r29
 39e:	b8 01       	movw	r22, r16
 3a0:	8c 2b       	or	r24, r28
 3a2:	47 df       	rcall	.-370    	; 0x232 <i2c_set_buffer>
		i2c_start(mcp_i2c_callback);	
 3a4:	83 e3       	ldi	r24, 0x33	; 51
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	4b df       	rcall	.-362    	; 0x240 <i2c_start>
	}
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <main>:

int main(void)
{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	60 97       	sbiw	r28, 0x10	; 16
 3be:	cd bf       	out	0x3d, r28	; 61
 3c0:	de bf       	out	0x3e, r29	; 62
	uint8_t spi_rx_temp[16]; // Used once, should free up this memory after use.
	
	system_init();
 3c2:	7a df       	rcall	.-268    	; 0x2b8 <system_init>
//	usart_init();
	clear_msg_queue();
 3c4:	93 d0       	rcall	.+294    	; 0x4ec <clear_msg_queue>
	spi_start(SPI_SETUP, spi_rx_temp, 16); // Read MCP23X17 settings from EEPROM	
 3c6:	40 e1       	ldi	r20, 0x10	; 16
 3c8:	be 01       	movw	r22, r28
 3ca:	6f 5f       	subi	r22, 0xFF	; 255
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	94 e1       	ldi	r25, 0x14	; 20
 3d2:	6b d1       	rcall	.+726    	; 0x6aa <spi_start>
	i2c_set_buffer((I2C_ADDR_1<<1) | I2C_WRITE_bm, I2C_SETUP, 15);
 3d4:	4f e0       	ldi	r20, 0x0F	; 15
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	74 e1       	ldi	r23, 0x14	; 20
 3da:	80 e4       	ldi	r24, 0x40	; 64
 3dc:	2a df       	rcall	.-428    	; 0x232 <i2c_set_buffer>
	i2c_start(mcp_i2c_callback);
 3de:	83 e3       	ldi	r24, 0x33	; 51
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	2e df       	rcall	.-420    	; 0x240 <i2c_start>
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <main+0x30>

000003e6 <__vector_3>:
		
    }
}

ISR(PORTA_PORT_vect) 
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	uint8_t intflags = PORTA.INTFLAGS;
 408:	e0 e0       	ldi	r30, 0x00	; 0
 40a:	f4 e0       	ldi	r31, 0x04	; 4
 40c:	81 85       	ldd	r24, Z+9	; 0x09
	PORTA.INTFLAGS = intflags;
 40e:	81 87       	std	Z+9, r24	; 0x09
	
	// MCP PORTB interrupt, PINA4 -> SPI, PINA5 -> I2C
	mcp_read_inputs();
 410:	a0 df       	rcall	.-192    	; 0x352 <mcp_read_inputs>
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_5>:

ISR(PORTC_PORT_vect) // Eval board button
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	uint8_t intflags = PORTC.INTFLAGS;
 456:	e0 e4       	ldi	r30, 0x40	; 64
 458:	f4 e0       	ldi	r31, 0x04	; 4
 45a:	81 85       	ldd	r24, Z+9	; 0x09
	PORTC.INTFLAGS = intflags;
 45c:	81 87       	std	Z+9, r24	; 0x09
	mcp_cycle_LEDS();
 45e:	43 df       	rcall	.-378    	; 0x2e6 <mcp_cycle_LEDS>
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <get_current_address>:

uint8_t get_msg_queue_overflow(void){	return rb.overflow;	}

buff_state_t get_msg_queue_status(void){	return rb.status;	}

void clear_msg_overflow (void){	rb.overflow = 0;	}
 482:	e0 91 2a 3e 	lds	r30, 0x3E2A	; 0x803e2a <rb>
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	e3 5d       	subi	r30, 0xD3	; 211
 492:	f1 4c       	sbci	r31, 0xC1	; 193
 494:	80 81       	ld	r24, Z
 496:	8f 77       	andi	r24, 0x7F	; 127
 498:	08 95       	ret

0000049a <get_current_rw_flag>:
 49a:	e0 91 2a 3e 	lds	r30, 0x3E2A	; 0x803e2a <rb>
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	e3 5d       	subi	r30, 0xD3	; 211
 4aa:	f1 4c       	sbci	r31, 0xC1	; 193
 4ac:	80 81       	ld	r24, Z
 4ae:	87 fb       	bst	r24, 7
 4b0:	88 27       	eor	r24, r24
 4b2:	80 f9       	bld	r24, 0
 4b4:	08 95       	ret

000004b6 <get_current_data_pointer>:
 4b6:	e0 91 2a 3e 	lds	r30, 0x3E2A	; 0x803e2a <rb>
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	e2 5d       	subi	r30, 0xD2	; 210
 4c6:	f1 4c       	sbci	r31, 0xC1	; 193
 4c8:	80 81       	ld	r24, Z
 4ca:	91 81       	ldd	r25, Z+1	; 0x01
 4cc:	08 95       	ret

000004ce <get_current_data_length>:
 4ce:	e0 91 2a 3e 	lds	r30, 0x3E2A	; 0x803e2a <rb>
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	ee 0f       	add	r30, r30
 4da:	ff 1f       	adc	r31, r31
 4dc:	e6 5d       	subi	r30, 0xD6	; 214
 4de:	f1 4c       	sbci	r31, 0xC1	; 193
 4e0:	86 81       	ldd	r24, Z+6	; 0x06
 4e2:	08 95       	ret

000004e4 <get_msg_queue_status>:
 4e4:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <rb+0x2>
 4e8:	83 70       	andi	r24, 0x03	; 3
 4ea:	08 95       	ret

000004ec <clear_msg_queue>:

void clear_msg_queue (void)
{
	rb.head = 0;
 4ec:	ea e2       	ldi	r30, 0x2A	; 42
 4ee:	fe e3       	ldi	r31, 0x3E	; 62
 4f0:	10 82       	st	Z, r1
	rb.tail = 0;
 4f2:	11 82       	std	Z+1, r1	; 0x01
	rb.status = RB_EMPTY;
 4f4:	ec e2       	ldi	r30, 0x2C	; 44
 4f6:	fe e3       	ldi	r31, 0x3E	; 62
 4f8:	80 81       	ld	r24, Z

uint8_t get_msg_queue_overflow(void){	return rb.overflow;	}

buff_state_t get_msg_queue_status(void){	return rb.status;	}

void clear_msg_overflow (void){	rb.overflow = 0;	}
 4fa:	8c 7f       	andi	r24, 0xFC	; 252
 4fc:	8b 7f       	andi	r24, 0xFB	; 251
 4fe:	80 83       	st	Z, r24
 500:	08 95       	ret

00000502 <increment_ring_buffer>:
	clear_msg_overflow();
}

void increment_ring_buffer (void)
{
	if(rb.status < RB_FULL)
 502:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <rb+0x2>
 506:	83 70       	andi	r24, 0x03	; 3
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 97       	sbiw	r24, 0x02	; 2
 50c:	dc f4       	brge	.+54     	; 0x544 <increment_ring_buffer+0x42>
	{
		if(++rb.tail > BUFFER_SIZE) rb.tail = BUFFER_SIZE;
 50e:	80 91 2b 3e 	lds	r24, 0x3E2B	; 0x803e2b <rb+0x1>
 512:	8f 5f       	subi	r24, 0xFF	; 255
 514:	85 30       	cpi	r24, 0x05	; 5
 516:	18 f4       	brcc	.+6      	; 0x51e <increment_ring_buffer+0x1c>
 518:	80 93 2b 3e 	sts	0x3E2B, r24	; 0x803e2b <rb+0x1>
 51c:	03 c0       	rjmp	.+6      	; 0x524 <increment_ring_buffer+0x22>
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	80 93 2b 3e 	sts	0x3E2B, r24	; 0x803e2b <rb+0x1>
		rb.status = ((rb.tail) == rb.head) ? RB_FULL : RB_IN_USE;
 524:	ea e2       	ldi	r30, 0x2A	; 42
 526:	fe e3       	ldi	r31, 0x3E	; 62
 528:	91 81       	ldd	r25, Z+1	; 0x01
 52a:	80 81       	ld	r24, Z
 52c:	98 17       	cp	r25, r24
 52e:	11 f0       	breq	.+4      	; 0x534 <increment_ring_buffer+0x32>
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	01 c0       	rjmp	.+2      	; 0x536 <increment_ring_buffer+0x34>
 534:	92 e0       	ldi	r25, 0x02	; 2
 536:	ec e2       	ldi	r30, 0x2C	; 44
 538:	fe e3       	ldi	r31, 0x3E	; 62
 53a:	80 81       	ld	r24, Z
 53c:	8c 7f       	andi	r24, 0xFC	; 252
 53e:	89 2b       	or	r24, r25
 540:	80 83       	st	Z, r24
 542:	08 95       	ret
	}
	else
	{
		rb.overflow = 1;
 544:	ec e2       	ldi	r30, 0x2C	; 44
 546:	fe e3       	ldi	r31, 0x3E	; 62
 548:	80 81       	ld	r24, Z
		rb.status = RB_ERR_OVERFLOW;
 54a:	87 60       	ori	r24, 0x07	; 7
 54c:	80 83       	st	Z, r24
 54e:	08 95       	ret

00000550 <delete_from_msg_queue>:
	}
}

void delete_from_msg_queue (void)
{
	if (rb.status != RB_EMPTY)
 550:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <rb+0x2>
 554:	83 70       	andi	r24, 0x03	; 3
 556:	c9 f0       	breq	.+50     	; 0x58a <delete_from_msg_queue+0x3a>
	{
		if(++rb.head > BUFFER_SIZE) rb.head = BUFFER_SIZE;
 558:	80 91 2a 3e 	lds	r24, 0x3E2A	; 0x803e2a <rb>
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	85 30       	cpi	r24, 0x05	; 5
 560:	18 f4       	brcc	.+6      	; 0x568 <delete_from_msg_queue+0x18>
 562:	80 93 2a 3e 	sts	0x3E2A, r24	; 0x803e2a <rb>
 566:	03 c0       	rjmp	.+6      	; 0x56e <delete_from_msg_queue+0x1e>
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	80 93 2a 3e 	sts	0x3E2A, r24	; 0x803e2a <rb>
		rb.status = (rb.tail == rb.head) ? RB_EMPTY : RB_IN_USE;
 56e:	ea e2       	ldi	r30, 0x2A	; 42
 570:	fe e3       	ldi	r31, 0x3E	; 62
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	21 81       	ldd	r18, Z+1	; 0x01
 576:	80 81       	ld	r24, Z
 578:	28 13       	cpse	r18, r24
 57a:	01 c0       	rjmp	.+2      	; 0x57e <delete_from_msg_queue+0x2e>
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	ec e2       	ldi	r30, 0x2C	; 44
 580:	fe e3       	ldi	r31, 0x3E	; 62
 582:	80 81       	ld	r24, Z
 584:	8c 7f       	andi	r24, 0xFC	; 252
 586:	89 2b       	or	r24, r25
 588:	80 83       	st	Z, r24
 58a:	08 95       	ret

0000058c <add_to_msg_queue>:
	}
}

void add_to_msg_queue (uint8_t addr, uint8_t rw, uint8_t *data, uint8_t data_count)
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
	rb.msg_list[rb.tail].addr = addr;
 590:	e0 91 2b 3e 	lds	r30, 0x3E2B	; 0x803e2b <rb+0x1>
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	df 01       	movw	r26, r30
 598:	aa 0f       	add	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	aa 0f       	add	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	ed 01       	movw	r28, r26
 5a2:	c3 5d       	subi	r28, 0xD3	; 211
 5a4:	d1 4c       	sbci	r29, 0xC1	; 193
 5a6:	8f 77       	andi	r24, 0x7F	; 127
 5a8:	98 81       	ld	r25, Y
 5aa:	90 78       	andi	r25, 0x80	; 128
	rb.msg_list[rb.tail].rw = rw;
 5ac:	89 2b       	or	r24, r25
 5ae:	60 fb       	bst	r22, 0
 5b0:	87 f9       	bld	r24, 7
 5b2:	88 83       	st	Y, r24
	rb.msg_list[rb.tail].data = data;
 5b4:	fd 01       	movw	r30, r26
 5b6:	e2 5d       	subi	r30, 0xD2	; 210
 5b8:	f1 4c       	sbci	r31, 0xC1	; 193
 5ba:	40 83       	st	Z, r20
 5bc:	51 83       	std	Z+1, r21	; 0x01
	rb.msg_list[rb.tail].data_len = data_count;
 5be:	a6 5d       	subi	r26, 0xD6	; 214
 5c0:	b1 4c       	sbci	r27, 0xC1	; 193
 5c2:	16 96       	adiw	r26, 0x06	; 6
 5c4:	2c 93       	st	X, r18
	increment_ring_buffer();
 5c6:	9d df       	rcall	.-198    	; 0x502 <increment_ring_buffer>
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <spi_slave_deselect>:
	return SPI_BUSY;
}

static spi_status_t spi_slave_deselect(void)
{
	VPORTC.OUT |= PIN3_bm;
 5ce:	4b 9a       	sbi	0x09, 3	; 9
	return spi_io.status;
}
 5d0:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <spi_io>
 5d4:	08 95       	ret

000005d6 <__vector_21>:

	}
}

ISR(SPI0_INT_vect)
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	ef 93       	push	r30
 5f6:	ff 93       	push	r31
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	1f 92       	push	r1
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
	register8_t int_flags = SPI0.INTFLAGS;
 602:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
 606:	89 83       	std	Y+1, r24	; 0x01
	// SPI_WRCOL_bm		write collision
	// SPI_IF_bm		byte transfer complete
	
	// CURRENTLY NO COLLISION ERROR HANDLING
	if (int_flags & SPI_WRCOL_bm) 
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	86 ff       	sbrs	r24, 6
 60c:	05 c0       	rjmp	.+10     	; 0x618 <__vector_21+0x42>
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 60e:	df df       	rcall	.-66     	; 0x5ce <spi_slave_deselect>
	// SPI_IF_bm		byte transfer complete
	
	// CURRENTLY NO COLLISION ERROR HANDLING
	if (int_flags & SPI_WRCOL_bm) 
	{
		spi_io.status = spi_slave_reset();
 610:	85 e0       	ldi	r24, 0x05	; 5
 612:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <spi_io>
 616:	1d c0       	rjmp	.+58     	; 0x652 <__vector_21+0x7c>
	/*
		For non-buffer mode:
		SPI_IF_bm is set on transfer complete. Cleared on interrupt vector execution, or by SPI.INTFLAGS read followed by DATA access.
		SPI_WRCOL is set if DATA is written before shift out is complete.
	*/
	*(spi_io.rx_byte_array + spi_io.byte_count) = SPI0.DATA;
 618:	e2 e1       	ldi	r30, 0x12	; 18
 61a:	fe e3       	ldi	r31, 0x3E	; 62
 61c:	86 81       	ldd	r24, Z+6	; 0x06
 61e:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 622:	a3 81       	ldd	r26, Z+3	; 0x03
 624:	b4 81       	ldd	r27, Z+4	; 0x04
 626:	a8 0f       	add	r26, r24
 628:	b1 1d       	adc	r27, r1
 62a:	9c 93       	st	X, r25
	spi_io.byte_count ++;
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	86 83       	std	Z+6, r24	; 0x06
	
	if (spi_io.byte_count < spi_io.size_byte_array)
 630:	95 81       	ldd	r25, Z+5	; 0x05
 632:	89 17       	cp	r24, r25
 634:	50 f4       	brcc	.+20     	; 0x64a <__vector_21+0x74>
	{
		SPI0.DATA = *(spi_io.tx_byte_array + spi_io.byte_count);		
 636:	e0 91 13 3e 	lds	r30, 0x3E13	; 0x803e13 <spi_io+0x1>
 63a:	f0 91 14 3e 	lds	r31, 0x3E14	; 0x803e14 <spi_io+0x2>
 63e:	e8 0f       	add	r30, r24
 640:	f1 1d       	adc	r31, r1
 642:	80 81       	ld	r24, Z
 644:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 648:	04 c0       	rjmp	.+8      	; 0x652 <__vector_21+0x7c>
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 64a:	c1 df       	rcall	.-126    	; 0x5ce <spi_slave_deselect>
	{
		SPI0.DATA = *(spi_io.tx_byte_array + spi_io.byte_count);		
	}
	else
	{
		spi_io.status = spi_slave_reset();
 64c:	85 e0       	ldi	r24, 0x05	; 5
 64e:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <spi_io>
	else
	{
		spi_isr();
	}
	
	SPI0.INTFLAGS = 0x00;
 652:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
}
 656:	0f 90       	pop	r0
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <spi_master_init>:

spi_status_t spi_master_init()
{
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
 67e:	e0 e4       	ldi	r30, 0x40	; 64
 680:	f4 e0       	ldi	r31, 0x04	; 4
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	82 83       	std	Z+2, r24	; 0x02
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
 686:	8d e0       	ldi	r24, 0x0D	; 13
 688:	81 83       	std	Z+1, r24	; 0x01
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
 68a:	48 98       	cbi	0x09, 0	; 9
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 68c:	a0 df       	rcall	.-192    	; 0x5ce <spi_slave_deselect>
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
	spi_io.status = spi_slave_reset();
 68e:	a2 e1       	ldi	r26, 0x12	; 18
 690:	be e3       	ldi	r27, 0x3E	; 62
 692:	85 e0       	ldi	r24, 0x05	; 5
 694:	8c 93       	st	X, r24
	
	// Setup for non-buffer mode.
	SPI0.CTRLB = 0<<SPI_BUFEN_bp | 
 696:	e0 e2       	ldi	r30, 0x20	; 32
 698:	f8 e0       	ldi	r31, 0x08	; 8
 69a:	84 e4       	ldi	r24, 0x44	; 68
 69c:	81 83       	std	Z+1, r24	; 0x01
				1<<SPI_BUFWR_bp | 
				1<<SPI_SSD_bp | 
				SPI_MODE_0_gc; // Disable multi-master for now
	SPI0.INTCTRL = SPI_IE_bm; // Buffer mode disabled, use this interrupt.	
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	82 83       	std	Z+2, r24	; 0x02
	SPI0.CTRLA = 0<<SPI_DORD_bp | // Transmit MSB first
 6a2:	85 e2       	ldi	r24, 0x25	; 37
 6a4:	80 83       	st	Z, r24
				0<<SPI_CLK2X_bp | 
				SPI_PRESC_DIV64_gc | 
				1<<SPI_ENABLE_bp;
				
	return spi_io.status;
}
 6a6:	8c 91       	ld	r24, X
 6a8:	08 95       	ret

000006aa <spi_start>:

spi_status_t spi_start (const uint8_t *tx_buff, uint8_t *rx_buff, uint8_t byte_count)
{
 6aa:	fc 01       	movw	r30, r24
	spi_status_t spi_state = SPI_IDLE;
	switch(spi_io.status)
 6ac:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <spi_io>
 6b0:	95 30       	cpi	r25, 0x05	; 5
 6b2:	b1 f4       	brne	.+44     	; 0x6e0 <spi_start+0x36>

static struct spi_data spi_io = {.status = SPI_IDLE, .tx_byte_array = NULL, .rx_byte_array = NULL, .size_byte_array = 0, .byte_count = 0};

static spi_status_t spi_slave_select(void)
{
	VPORTC.OUT &= ~PIN3_bm; // Set SS low
 6b4:	4b 98       	cbi	0x09, 3	; 9
	spi_status_t spi_state = SPI_IDLE;
	switch(spi_io.status)
	{
		case SPI_IDLE:
			// No multi-master -> no check that bus already in use
			spi_io.status = spi_slave_select();
 6b6:	a2 e1       	ldi	r26, 0x12	; 18
 6b8:	be e3       	ldi	r27, 0x3E	; 62
 6ba:	1c 92       	st	X, r1
			spi_io.tx_byte_array = tx_buff;
 6bc:	11 96       	adiw	r26, 0x01	; 1
 6be:	ed 93       	st	X+, r30
 6c0:	fc 93       	st	X, r31
 6c2:	12 97       	sbiw	r26, 0x02	; 2
			spi_io.rx_byte_array = rx_buff;
 6c4:	13 96       	adiw	r26, 0x03	; 3
 6c6:	6d 93       	st	X+, r22
 6c8:	7c 93       	st	X, r23
 6ca:	14 97       	sbiw	r26, 0x04	; 4
			spi_io.size_byte_array = byte_count;
 6cc:	15 96       	adiw	r26, 0x05	; 5
 6ce:	4c 93       	st	X, r20
 6d0:	15 97       	sbiw	r26, 0x05	; 5
			spi_io.byte_count = 0;
 6d2:	16 96       	adiw	r26, 0x06	; 6
 6d4:	1c 92       	st	X, r1
			SPI0.DATA = *spi_io.tx_byte_array;
 6d6:	80 81       	ld	r24, Z
 6d8:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
			spi_state = spi_io.status;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
			break;
 6de:	08 95       	ret
		default:
			spi_io.status = SPI_TX_BUFF_ERR;
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <spi_io>
	return spi_io.status;
}

spi_status_t spi_start (const uint8_t *tx_buff, uint8_t *rx_buff, uint8_t byte_count)
{
	spi_status_t spi_state = SPI_IDLE;
 6e6:	85 e0       	ldi	r24, 0x05	; 5
		default:
			spi_io.status = SPI_TX_BUFF_ERR;
			break;
	}
	return spi_state;
}
 6e8:	08 95       	ret

000006ea <_exit>:
 6ea:	f8 94       	cli

000006ec <__stop_program>:
 6ec:	ff cf       	rjmp	.-2      	; 0x6ec <__stop_program>
