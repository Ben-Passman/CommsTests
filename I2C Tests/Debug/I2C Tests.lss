
I2C Tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803e00  000004a2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000012  00008490  00000490  00000544  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000001c  00803e08  00803e08  0000055e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a1d  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b08  00000000  00000000  00003109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000927  00000000  00000000  00004c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  00005538  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001527  00000000  00000000  00005878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005e7  00000000  00000000  00006d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  00007386  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	66 c1       	rjmp	.+716    	; 0x2d4 <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	8b c1       	rjmp	.+790    	; 0x322 <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	a3 c0       	rjmp	.+326    	; 0x170 <__vector_20>
  2a:	a6 c1       	rjmp	.+844    	; 0x378 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e2 ea       	ldi	r30, 0xA2	; 162
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 32       	cpi	r26, 0x24	; 36
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	20 d1       	rcall	.+576    	; 0x2a8 <main>
  68:	11 c2       	rjmp	.+1058   	; 0x48c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_M_IDLE>:

void i2c_set_buffer(uint8_t addr, uint8_t read_write, uint8_t *data, uint8_t data_size)
{
	i2c_fsm.slave_addr = addr<<1 | read_write;
	i2c_fsm.byte_array = data;
	i2c_fsm.size_byte_array = data_size;
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	08 95       	ret

00000070 <I2C_M_START>:
  70:	e8 e0       	ldi	r30, 0x08	; 8
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	14 82       	std	Z+4, r1	; 0x04
  76:	80 81       	ld	r24, Z
  78:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
  7c:	80 fd       	sbrc	r24, 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <I2C_M_START+0x14>
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	08 95       	ret
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	08 95       	ret

00000088 <I2C_M_STOP>:
  88:	e0 e1       	ldi	r30, 0x10	; 16
  8a:	f8 e0       	ldi	r31, 0x08	; 8
  8c:	84 81       	ldd	r24, Z+4	; 0x04
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	84 83       	std	Z+4, r24	; 0x04
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	08 95       	ret

00000096 <I2C_M_RESET>:
  96:	e0 e1       	ldi	r30, 0x10	; 16
  98:	f8 e0       	ldi	r31, 0x08	; 8
  9a:	84 81       	ldd	r24, Z+4	; 0x04
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	84 83       	std	Z+4, r24	; 0x04
  a0:	85 81       	ldd	r24, Z+5	; 0x05
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	85 83       	std	Z+5, r24	; 0x05
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret

000000aa <I2C_M_TX>:
  aa:	e8 e0       	ldi	r30, 0x08	; 8
  ac:	fe e3       	ldi	r31, 0x3E	; 62
  ae:	84 81       	ldd	r24, Z+4	; 0x04
  b0:	a1 81       	ldd	r26, Z+1	; 0x01
  b2:	b2 81       	ldd	r27, Z+2	; 0x02
  b4:	a8 0f       	add	r26, r24
  b6:	b1 1d       	adc	r27, r1
  b8:	9c 91       	ld	r25, X
  ba:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	84 83       	std	Z+4, r24	; 0x04
  c2:	93 81       	ldd	r25, Z+3	; 0x03
  c4:	89 17       	cp	r24, r25
  c6:	10 f4       	brcc	.+4      	; 0xcc <I2C_M_TX+0x22>
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	08 95       	ret
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	08 95       	ret

000000d0 <I2C_M_RX>:
  d0:	e8 e0       	ldi	r30, 0x08	; 8
  d2:	fe e3       	ldi	r31, 0x3E	; 62
  d4:	84 81       	ldd	r24, Z+4	; 0x04
  d6:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
  da:	a1 81       	ldd	r26, Z+1	; 0x01
  dc:	b2 81       	ldd	r27, Z+2	; 0x02
  de:	a8 0f       	add	r26, r24
  e0:	b1 1d       	adc	r27, r1
  e2:	9c 93       	st	X, r25
  e4:	93 81       	ldd	r25, Z+3	; 0x03
  e6:	89 17       	cp	r24, r25
  e8:	50 f4       	brcc	.+20     	; 0xfe <I2C_M_RX+0x2e>
  ea:	e0 e1       	ldi	r30, 0x10	; 16
  ec:	f8 e0       	ldi	r31, 0x08	; 8
  ee:	84 81       	ldd	r24, Z+4	; 0x04
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	84 83       	std	Z+4, r24	; 0x04
  f4:	84 81       	ldd	r24, Z+4	; 0x04
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	84 83       	std	Z+4, r24	; 0x04
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	06 c0       	rjmp	.+12     	; 0x10a <I2C_M_RX+0x3a>
  fe:	e0 e1       	ldi	r30, 0x10	; 16
 100:	f8 e0       	ldi	r31, 0x08	; 8
 102:	84 81       	ldd	r24, Z+4	; 0x04
 104:	84 60       	ori	r24, 0x04	; 4
 106:	84 83       	std	Z+4, r24	; 0x04
 108:	bf df       	rcall	.-130    	; 0x88 <I2C_M_STOP>
 10a:	e8 e0       	ldi	r30, 0x08	; 8
 10c:	fe e3       	ldi	r31, 0x3E	; 62
 10e:	94 81       	ldd	r25, Z+4	; 0x04
 110:	9f 5f       	subi	r25, 0xFF	; 255
 112:	94 83       	std	Z+4, r25	; 0x04
 114:	08 95       	ret

00000116 <I2C_M_RX_NACK>:
 116:	b8 df       	rcall	.-144    	; 0x88 <I2C_M_STOP>
 118:	08 95       	ret

0000011a <I2C_M_ARB_LOST>:
 11a:	b6 df       	rcall	.-148    	; 0x88 <I2C_M_STOP>
 11c:	08 95       	ret

0000011e <I2C_M_BUS_ERR>:
 11e:	bb df       	rcall	.-138    	; 0x96 <I2C_M_RESET>
 120:	08 95       	ret

00000122 <i2c_state_isr>:
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 12a:	84 ff       	sbrs	r24, 4
 12c:	03 c0       	rjmp	.+6      	; 0x134 <i2c_state_isr+0x12>
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <__data_end+0x5>
 134:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 138:	83 ff       	sbrs	r24, 3
 13a:	03 c0       	rjmp	.+6      	; 0x142 <i2c_state_isr+0x20>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <__data_end+0x5>
 142:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 146:	82 ff       	sbrs	r24, 2
 148:	03 c0       	rjmp	.+6      	; 0x150 <i2c_state_isr+0x2e>
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <__data_end+0x5>
 150:	c8 e0       	ldi	r28, 0x08	; 8
 152:	de e3       	ldi	r29, 0x3E	; 62
 154:	ed 81       	ldd	r30, Y+5	; 0x05
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e0 57       	subi	r30, 0x70	; 112
 15e:	fb 47       	sbci	r31, 0x7B	; 123
 160:	01 90       	ld	r0, Z+
 162:	f0 81       	ld	r31, Z
 164:	e0 2d       	mov	r30, r0
 166:	09 95       	icall
 168:	8d 83       	std	Y+5, r24	; 0x05
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <__vector_20>:
/*	------------------------------------------------------------------------------------------------
	INTERRUPTS
	------------------------------------------------------------------------------------------------	*/

ISR(TWI0_TWIM_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	// Bus is IDLE, OWNER, BUSY or UNDEFINED. Errors are ARBLOST and BUSERR
	// ARBLOST fails at any point on packet transmission, start -> NACK
	// For ARBLOST must restart (write to MADDR). MADDR write clears ARBLOST flag.
	// BUSERR is an illegal condition (e.g. Start followed by Stop). MADDR write clears BUSERR flag.
	
	i2c_state_isr();
 192:	c7 df       	rcall	.-114    	; 0x122 <i2c_state_isr>
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <i2c_master_init>:
	------------------------------------------------------------------------------------------------	*/

void i2c_master_init()
{
	// Peripheral controls
	TWI0.CTRLA = TWI_SDASETUP_4CYC_gc | TWI_SDAHOLD_OFF_gc | 0<<TWI_FMPEN_bp;
 1b6:	e0 e1       	ldi	r30, 0x10	; 16
 1b8:	f8 e0       	ldi	r31, 0x08	; 8
 1ba:	10 82       	st	Z, r1
	TWI0.DBGCTRL = TWI_DBGRUN_bm; // Keep peripheral running during debug mode
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	82 83       	std	Z+2, r24	; 0x02
	// I2C Master controls
	TWI0.MBAUD = BAUD; // Derives SCL hi/lo times. (See data sheet for equation) Write while ENABLE bit in TWI.MCTRLA is 0
 1c0:	8b e0       	ldi	r24, 0x0B	; 11
 1c2:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_TIMEOUT_DISABLED_gc | TWI_ENABLE_bm; // Quick command and smart mode not in use
 1c4:	81 ec       	ldi	r24, 0xC1	; 193
 1c6:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MCTRLB &= 0<<TWI_ACKACT_bp; // 0 send ACK, 1 send NACK when data read or execute command written to CMD bits
 1c8:	84 81       	ldd	r24, Z+4	; 0x04
 1ca:	14 82       	std	Z+4, r1	; 0x04
	TWI0_MCTRLB |= TWI_FLUSH_bm;
 1cc:	a4 e1       	ldi	r26, 0x14	; 20
 1ce:	b8 e0       	ldi	r27, 0x08	; 8
 1d0:	8c 91       	ld	r24, X
 1d2:	88 60       	ori	r24, 0x08	; 8
 1d4:	8c 93       	st	X, r24
	
	// ASSUMES BUS IS IDLE, SHOULD CHECK SDA/SCK LINES. (Port A 1&2 for alt. pin config)
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	
 1d6:	85 81       	ldd	r24, Z+5	; 0x05
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	85 83       	std	Z+5, r24	; 0x05

	i2c_fsm.state = I2C_IDLE;
 1dc:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <__data_end+0x5>
 1e0:	08 95       	ret

000001e2 <i2c_start>:
	// SHOULD RETURN SUCCESS/FAIL?
}

void i2c_start (uint8_t addr, uint8_t read_write, uint8_t *data, uint8_t data_size) {
	// Also need to check bus is free for multi-master.
	if (i2c_fsm.state == I2C_IDLE)
 1e2:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <__data_end+0x5>
 1e6:	91 11       	cpse	r25, r1
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <i2c_start+0x1e>

static struct i2c_data i2c_fsm = {.slave_addr = 0, .byte_array = NULL, .size_byte_array = 0, .byte_count = 0, .state = I2C_IDLE};

void i2c_set_buffer(uint8_t addr, uint8_t read_write, uint8_t *data, uint8_t data_size)
{
	i2c_fsm.slave_addr = addr<<1 | read_write;
 1ea:	e8 e0       	ldi	r30, 0x08	; 8
 1ec:	fe e3       	ldi	r31, 0x3E	; 62
 1ee:	88 0f       	add	r24, r24
 1f0:	68 2b       	or	r22, r24
 1f2:	60 83       	st	Z, r22
	i2c_fsm.byte_array = data;
 1f4:	41 83       	std	Z+1, r20	; 0x01
 1f6:	52 83       	std	Z+2, r21	; 0x02
	i2c_fsm.size_byte_array = data_size;
 1f8:	23 83       	std	Z+3, r18	; 0x03
void i2c_start (uint8_t addr, uint8_t read_write, uint8_t *data, uint8_t data_size) {
	// Also need to check bus is free for multi-master.
	if (i2c_fsm.state == I2C_IDLE)
	{
		i2c_set_buffer(addr, read_write, data, data_size);
		i2c_fsm.state = I2C_START;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	85 83       	std	Z+5, r24	; 0x05
		
		i2c_state_isr();
 1fe:	91 df       	rcall	.-222    	; 0x122 <i2c_state_isr>
 200:	08 95       	ret

00000202 <system_init>:
	spi_bytes[1] = PORTA_ADDR(OLAT, SEQ_ADDR);
	spi_bytes[2] = (spi_bytes[2] & 0x01)<<7 |		// PORTB PIN0 -> PORTA PIN7
					(spi_bytes[2] & 0x04)<<4 |	// PORTB PIN2 -> PORTA PIN6
					(spi_bytes[2] & 0x10)<<1 |	// PORTB PIN4 -> PORTA PIN5
					(spi_bytes[2] & 0x40)>>2;	// PORTB PIN6 -> PORTA PIN4
	spi_start(spi_bytes, spi_bytes, 3); // Write to MCP23X17, no callback required
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
 20e:	e0 e0       	ldi	r30, 0x00	; 0
 210:	f4 e0       	ldi	r31, 0x04	; 4
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	81 83       	std	Z+1, r24	; 0x01
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	84 8b       	std	Z+20, r24	; 0x14
 21a:	85 8b       	std	Z+21, r24	; 0x15
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
 222:	8f b7       	in	r24, 0x3f	; 63
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8f bf       	out	0x3f, r24	; 63
 228:	fb d0       	rcall	.+502    	; 0x420 <spi_master_init>
 22a:	c5 df       	rcall	.-118    	; 0x1b6 <i2c_master_init>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret

00000230 <mcp_cycle_LEDS>:
	
	
}

void mcp_cycle_LEDS(void)
{
 230:	cf 93       	push	r28
	LED_test = LED_test >> 7 | LED_test << 1;
 232:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
 236:	88 0f       	add	r24, r24
 238:	81 1d       	adc	r24, r1
 23a:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
	spi_bytes[0] =  SPI_ADDR<<1 | MCP23X17_WRITE;
 23e:	e0 e1       	ldi	r30, 0x10	; 16
 240:	fe e3       	ldi	r31, 0x3E	; 62
 242:	90 e4       	ldi	r25, 0x40	; 64
 244:	90 83       	st	Z, r25
	spi_bytes[1] = PORTA_ADDR(OLAT, SEQ_ADDR);
 246:	c4 e1       	ldi	r28, 0x14	; 20
 248:	c1 83       	std	Z+1, r28	; 0x01
	spi_bytes[2] = LED_test;
 24a:	82 83       	std	Z+2, r24	; 0x02
	spi_start(spi_bytes, spi_bytes, 3);
 24c:	43 e0       	ldi	r20, 0x03	; 3
 24e:	bf 01       	movw	r22, r30
 250:	cf 01       	movw	r24, r30
 252:	fc d0       	rcall	.+504    	; 0x44c <spi_start>

	i2c_bytes[0] = PORTA_ADDR(OLAT, SEQ_ADDR);
 254:	e4 e1       	ldi	r30, 0x14	; 20
 256:	fe e3       	ldi	r31, 0x3E	; 62
 258:	c0 83       	st	Z, r28
	i2c_bytes[1] = LED_test;
 25a:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
 25e:	81 83       	std	Z+1, r24	; 0x01
	i2c_start(I2C_ADDR_1, I2C_WRITE_bm, i2c_bytes, 2);
 260:	22 e0       	ldi	r18, 0x02	; 2
 262:	af 01       	movw	r20, r30
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	bc df       	rcall	.-136    	; 0x1e2 <i2c_start>
}
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <mcp_read_inputs>:

void mcp_read_inputs(void)
{
	spi_bytes[0] = SPI_ADDR<<1 | MCP23X17_READ;
 26e:	e0 e1       	ldi	r30, 0x10	; 16
 270:	fe e3       	ldi	r31, 0x3E	; 62
 272:	81 e4       	ldi	r24, 0x41	; 65
 274:	80 83       	st	Z, r24
	spi_bytes[1] = PORTB_ADDR(INTCAP, SEQ_ADDR);
 276:	81 e1       	ldi	r24, 0x11	; 17
 278:	81 83       	std	Z+1, r24	; 0x01
	// Counters confirm reads are being missed, possible data collision...
	// Need to check for busy status and queue messages.
	int_counter++;
 27a:	80 91 0f 3e 	lds	r24, 0x3E0F	; 0x803e0f <int_counter>
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	80 93 0f 3e 	sts	0x3E0F, r24	; 0x803e0f <int_counter>
	if (spi_start(spi_bytes, spi_bytes, 3) == SPI_BUSY)
 284:	43 e0       	ldi	r20, 0x03	; 3
 286:	bf 01       	movw	r22, r30
 288:	cf 01       	movw	r24, r30
 28a:	e0 d0       	rcall	.+448    	; 0x44c <spi_start>
 28c:	81 11       	cpse	r24, r1
 28e:	05 c0       	rjmp	.+10     	; 0x29a <mcp_read_inputs+0x2c>
	{
		read_counter++;
 290:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <read_counter>
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <read_counter>
	}
	
// I2C read requires write to select register, then restart to transfer.
//	i2c_bytes[0] = PORTB_ADDR(INTCAP, SEQ_ADDR);
//	i2c_start(I2C_ADDR_1, I2C_WRITE_bm, i2c_bytes, 2); // Select register to read, then do restart
	i2c_start(I2C_ADDR_1, I2C_READ_bm, i2c_bytes, 16); // NEED TO CLEAN UP I2C READ FUNCTIONS
 29a:	20 e1       	ldi	r18, 0x10	; 16
 29c:	44 e1       	ldi	r20, 0x14	; 20
 29e:	5e e3       	ldi	r21, 0x3E	; 62
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	80 e2       	ldi	r24, 0x20	; 32
 2a4:	9e df       	rcall	.-196    	; 0x1e2 <i2c_start>
 2a6:	08 95       	ret

000002a8 <main>:
}

int main(void)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	60 97       	sbiw	r28, 0x10	; 16
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	de bf       	out	0x3e, r29	; 62
	uint8_t spi_rx_temp[16];
	
	system_init();
 2b6:	a5 df       	rcall	.-182    	; 0x202 <system_init>
	spi_start((const uint8_t *)0x1400, spi_rx_temp, 16); // Read MCP23X17 settings from EEPROM	
 2b8:	40 e1       	ldi	r20, 0x10	; 16
 2ba:	be 01       	movw	r22, r28
 2bc:	6f 5f       	subi	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	94 e1       	ldi	r25, 0x14	; 20
 2c4:	c3 d0       	rcall	.+390    	; 0x44c <spi_start>
	i2c_start(I2C_ADDR_1, I2C_WRITE_bm, (uint8_t *)0x1401, 15);
 2c6:	2f e0       	ldi	r18, 0x0F	; 15
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	54 e1       	ldi	r21, 0x14	; 20
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	80 e2       	ldi	r24, 0x20	; 32
 2d0:	88 df       	rcall	.-240    	; 0x1e2 <i2c_start>
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <main+0x2a>

000002d4 <__vector_3>:
		
    }
}

ISR(PORTA_PORT_vect) 
{
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	uint8_t intflags = PORTA.INTFLAGS;
 2f6:	e0 e0       	ldi	r30, 0x00	; 0
 2f8:	f4 e0       	ldi	r31, 0x04	; 4
 2fa:	81 85       	ldd	r24, Z+9	; 0x09
	PORTA.INTFLAGS = intflags;
 2fc:	81 87       	std	Z+9, r24	; 0x09
	
	// MCP PORTB interrupt
	// PINA4 -> SPI
	// PINA5 -> I2C
	
	mcp_read_inputs();
 2fe:	b7 df       	rcall	.-146    	; 0x26e <mcp_read_inputs>
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__vector_5>:

ISR(PORTC_PORT_vect) // Eval board button
{
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	2f 93       	push	r18
 32e:	3f 93       	push	r19
 330:	4f 93       	push	r20
 332:	5f 93       	push	r21
 334:	6f 93       	push	r22
 336:	7f 93       	push	r23
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	af 93       	push	r26
 33e:	bf 93       	push	r27
 340:	ef 93       	push	r30
 342:	ff 93       	push	r31
	uint8_t intflags = PORTC.INTFLAGS;
 344:	e0 e4       	ldi	r30, 0x40	; 64
 346:	f4 e0       	ldi	r31, 0x04	; 4
 348:	81 85       	ldd	r24, Z+9	; 0x09
	PORTC.INTFLAGS = intflags;
 34a:	81 87       	std	Z+9, r24	; 0x09
	mcp_cycle_LEDS();
 34c:	71 df       	rcall	.-286    	; 0x230 <mcp_cycle_LEDS>
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <spi_slave_deselect>:
	return SPI_BUSY;
}

static spi_status_t spi_slave_deselect(void)
{
	VPORTC.OUT |= PIN3_bm;
 370:	4b 9a       	sbi	0x09, 3	; 9
	return spi_io.status;
}
 372:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <spi_io>
 376:	08 95       	ret

00000378 <__vector_21>:

	}
}

ISR(SPI0_INT_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	1f 92       	push	r1
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	register8_t int_flags = SPI0.INTFLAGS;
 3a4:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
 3a8:	89 83       	std	Y+1, r24	; 0x01
	// SPI_WRCOL_bm		write collision
	// SPI_IF_bm		byte transfer complete
	
	// CURRENTLY NO COLLISION ERROR HANDLING
	if (int_flags & SPI_WRCOL_bm) 
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	86 ff       	sbrs	r24, 6
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <__vector_21+0x42>
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 3b0:	df df       	rcall	.-66     	; 0x370 <spi_slave_deselect>
	// SPI_IF_bm		byte transfer complete
	
	// CURRENTLY NO COLLISION ERROR HANDLING
	if (int_flags & SPI_WRCOL_bm) 
	{
		spi_io.status = spi_slave_reset();
 3b2:	85 e0       	ldi	r24, 0x05	; 5
 3b4:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <spi_io>
 3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <__vector_21+0x7c>
	/*
		For non-buffer mode:
		SPI_IF_bm is set on transfer complete. Cleared on interrupt vector execution, or by SPI.INTFLAGS read followed by DATA access.
		SPI_WRCOL is set if DATA is written before shift out is complete.
	*/
	*(spi_io.rx_byte_array + spi_io.byte_count) = SPI0.DATA;
 3ba:	e1 e0       	ldi	r30, 0x01	; 1
 3bc:	fe e3       	ldi	r31, 0x3E	; 62
 3be:	86 81       	ldd	r24, Z+6	; 0x06
 3c0:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 3c4:	a3 81       	ldd	r26, Z+3	; 0x03
 3c6:	b4 81       	ldd	r27, Z+4	; 0x04
 3c8:	a8 0f       	add	r26, r24
 3ca:	b1 1d       	adc	r27, r1
 3cc:	9c 93       	st	X, r25
	spi_io.byte_count ++;
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	86 83       	std	Z+6, r24	; 0x06
	
	if (spi_io.byte_count < spi_io.size_byte_array)
 3d2:	95 81       	ldd	r25, Z+5	; 0x05
 3d4:	89 17       	cp	r24, r25
 3d6:	50 f4       	brcc	.+20     	; 0x3ec <__vector_21+0x74>
	{
		SPI0.DATA = *(spi_io.tx_byte_array + spi_io.byte_count);		
 3d8:	e0 91 02 3e 	lds	r30, 0x3E02	; 0x803e02 <spi_io+0x1>
 3dc:	f0 91 03 3e 	lds	r31, 0x3E03	; 0x803e03 <spi_io+0x2>
 3e0:	e8 0f       	add	r30, r24
 3e2:	f1 1d       	adc	r31, r1
 3e4:	80 81       	ld	r24, Z
 3e6:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <__vector_21+0x7c>
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 3ec:	c1 df       	rcall	.-126    	; 0x370 <spi_slave_deselect>
	{
		SPI0.DATA = *(spi_io.tx_byte_array + spi_io.byte_count);		
	}
	else
	{
		spi_io.status = spi_slave_reset();
 3ee:	85 e0       	ldi	r24, 0x05	; 5
 3f0:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <spi_io>
	else
	{
		spi_isr();
	}
	
	SPI0.INTFLAGS = 0x00;
 3f4:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
}
 3f8:	0f 90       	pop	r0
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <spi_master_init>:

spi_status_t spi_master_init()
{
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
 420:	e0 e4       	ldi	r30, 0x40	; 64
 422:	f4 e0       	ldi	r31, 0x04	; 4
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	82 83       	std	Z+2, r24	; 0x02
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	81 83       	std	Z+1, r24	; 0x01
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
 42c:	48 98       	cbi	0x09, 0	; 9
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 42e:	a0 df       	rcall	.-192    	; 0x370 <spi_slave_deselect>
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
	spi_io.status = spi_slave_reset();
 430:	a1 e0       	ldi	r26, 0x01	; 1
 432:	be e3       	ldi	r27, 0x3E	; 62
 434:	85 e0       	ldi	r24, 0x05	; 5
 436:	8c 93       	st	X, r24
	
	// Setup for non-buffer mode.
	SPI0.CTRLB = 0<<SPI_BUFEN_bp | 
 438:	e0 e2       	ldi	r30, 0x20	; 32
 43a:	f8 e0       	ldi	r31, 0x08	; 8
 43c:	84 e4       	ldi	r24, 0x44	; 68
 43e:	81 83       	std	Z+1, r24	; 0x01
				1<<SPI_BUFWR_bp | 
				1<<SPI_SSD_bp | 
				SPI_MODE_0_gc; // Disable multi-master for now
	SPI0.INTCTRL = SPI_IE_bm; // Buffer mode disabled, use this interrupt.	
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	82 83       	std	Z+2, r24	; 0x02
	SPI0.CTRLA = 0<<SPI_DORD_bp | // Transmit MSB first
 444:	85 e2       	ldi	r24, 0x25	; 37
 446:	80 83       	st	Z, r24
				0<<SPI_CLK2X_bp | 
				SPI_PRESC_DIV64_gc | 
				1<<SPI_ENABLE_bp;
				
	return spi_io.status;
}
 448:	8c 91       	ld	r24, X
 44a:	08 95       	ret

0000044c <spi_start>:

spi_status_t spi_start (const uint8_t *tx_buff, uint8_t *rx_buff, uint8_t size)
{
 44c:	fc 01       	movw	r30, r24
	spi_status_t spi_state = SPI_IDLE;
	switch(spi_io.status)
 44e:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <spi_io>
 452:	95 30       	cpi	r25, 0x05	; 5
 454:	b1 f4       	brne	.+44     	; 0x482 <spi_start+0x36>

static struct spi_data spi_io = {.status = SPI_IDLE, .tx_byte_array = NULL, .rx_byte_array = NULL, .size_byte_array = 0, .byte_count = 0};

static spi_status_t spi_slave_select(void)
{
	VPORTC.OUT &= ~PIN3_bm; // Set SS low
 456:	4b 98       	cbi	0x09, 3	; 9
	spi_status_t spi_state = SPI_IDLE;
	switch(spi_io.status)
	{
		case SPI_IDLE:
			// No multi-master -> no check that bus already in use
			spi_io.status = spi_slave_select();
 458:	a1 e0       	ldi	r26, 0x01	; 1
 45a:	be e3       	ldi	r27, 0x3E	; 62
 45c:	1c 92       	st	X, r1
			spi_io.tx_byte_array = tx_buff;
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	ed 93       	st	X+, r30
 462:	fc 93       	st	X, r31
 464:	12 97       	sbiw	r26, 0x02	; 2
			spi_io.rx_byte_array = rx_buff;
 466:	13 96       	adiw	r26, 0x03	; 3
 468:	6d 93       	st	X+, r22
 46a:	7c 93       	st	X, r23
 46c:	14 97       	sbiw	r26, 0x04	; 4
			spi_io.size_byte_array = size;
 46e:	15 96       	adiw	r26, 0x05	; 5
 470:	4c 93       	st	X, r20
 472:	15 97       	sbiw	r26, 0x05	; 5
			spi_io.byte_count = 0;
 474:	16 96       	adiw	r26, 0x06	; 6
 476:	1c 92       	st	X, r1
			SPI0.DATA = *spi_io.tx_byte_array;
 478:	80 81       	ld	r24, Z
 47a:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
			spi_state = spi_io.status;
 47e:	80 e0       	ldi	r24, 0x00	; 0
			break;
 480:	08 95       	ret
		default:
			spi_io.status = SPI_TX_BUFF_ERR;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <spi_io>
	return spi_io.status;
}

spi_status_t spi_start (const uint8_t *tx_buff, uint8_t *rx_buff, uint8_t size)
{
	spi_status_t spi_state = SPI_IDLE;
 488:	85 e0       	ldi	r24, 0x05	; 5
		default:
			spi_io.status = SPI_TX_BUFF_ERR;
			break;
	}
	return spi_state;
}
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
