
I2C Tests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00803e00  0000074a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000738  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000012  00008738  00000738  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000021  00803e1a  00803e1a  00000818  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003072  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c9d  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b8a  00000000  00000000  0000570b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000434  00000000  00000000  00006298  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000169d  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007c7  00000000  00000000  00007d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00008530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	72 c2       	rjmp	.+1252   	; 0x4ec <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	97 c2       	rjmp	.+1326   	; 0x53a <__vector_5>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	bd c0       	rjmp	.+378    	; 0x1a4 <__vector_20>
  2a:	fa c2       	rjmp	.+1524   	; 0x620 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	ea e4       	ldi	r30, 0x4A	; 74
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 31       	cpi	r26, 0x1A	; 26
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	aa e1       	ldi	r26, 0x1A	; 26
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ab 33       	cpi	r26, 0x3B	; 59
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	26 d2       	rcall	.+1100   	; 0x4b4 <main>
  68:	65 c3       	rjmp	.+1738   	; 0x734 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <I2C_M_IDLE>:
	------------------------------------------------------------------------------------------------	*/

static i2c_states_t I2C_M_IDLE(void)
{
	return I2C_IDLE;
}
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	08 95       	ret

00000070 <I2C_M_START>:
	// On receiving ACK/NACK (if arbitration not lost) SCL held low and CLKHOLD and WIF set.
	// If bus already owned, repeat start generated. (ACK/NACK sent first if previous operation was read)
	// For read command RIF is set after byte received.
	// Writes to MSTATUS clear flags (CHECK).
	
	i2c_fsm.byte_count = 0;
  70:	ea e1       	ldi	r30, 0x1A	; 26
  72:	fe e3       	ldi	r31, 0x3E	; 62
  74:	14 82       	std	Z+4, r1	; 0x04
	i2c_fsm.nack_check = 1;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MADDR = i2c_fsm.slave_addr;
  7a:	80 81       	ld	r24, Z
  7c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <__TEXT_REGION_LENGTH__+0x700817>
		
	return (i2c_fsm.slave_addr & I2C_READ_bm) ? I2C_RX_BYTE : I2C_TX_BYTE;
  80:	80 fd       	sbrc	r24, 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <I2C_M_START+0x18>
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	08 95       	ret
  88:	85 e0       	ldi	r24, 0x05	; 5
}
  8a:	08 95       	ret

0000008c <I2C_M_STOP>:
	//return I2C_M_START();
}*/

static i2c_states_t I2C_M_STOP(void)
{
	TWI0.MCTRLB	|= TWI_MCMD_STOP_gc | TWI_ACKACT_bm; // NACK used for RX STOP condition
  8c:	e0 e1       	ldi	r30, 0x10	; 16
  8e:	f8 e0       	ldi	r31, 0x08	; 8
  90:	84 81       	ldd	r24, Z+4	; 0x04
  92:	87 60       	ori	r24, 0x07	; 7
  94:	84 83       	std	Z+4, r24	; 0x04
	
	return I2C_IDLE;
}
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	08 95       	ret

0000009a <I2C_M_RESET>:

static i2c_states_t I2C_M_RESET(void)
{
	TWI0.MCTRLB |= TWI_FLUSH_bm;
  9a:	e0 e1       	ldi	r30, 0x10	; 16
  9c:	f8 e0       	ldi	r31, 0x08	; 8
  9e:	84 81       	ldd	r24, Z+4	; 0x04
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	84 83       	std	Z+4, r24	; 0x04
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
  a4:	85 81       	ldd	r24, Z+5	; 0x05
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	85 83       	std	Z+5, r24	; 0x05
	
	return I2C_IDLE;
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret

000000ae <I2C_M_TX>:

static i2c_states_t I2C_M_TX(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	i2c_states_t next_state = I2C_TX_BYTE;
	
	// MDATA Read/Write only available during CLKHOLD.
	// Write to MDATA forces transmit, ignores ACKACT
	// MDATA read/write clears interrupt flags, but not ARBLOST or BUSERR
	if (i2c_fsm.byte_count < i2c_fsm.size_byte_array)
  b2:	ea e1       	ldi	r30, 0x1A	; 26
  b4:	fe e3       	ldi	r31, 0x3E	; 62
  b6:	84 81       	ldd	r24, Z+4	; 0x04
  b8:	93 81       	ldd	r25, Z+3	; 0x03
  ba:	89 17       	cp	r24, r25
  bc:	58 f4       	brcc	.+22     	; 0xd4 <I2C_M_TX+0x26>
	{
		TWI0.MDATA = *(i2c_fsm.byte_array + i2c_fsm.byte_count);
  be:	e0 91 1b 3e 	lds	r30, 0x3E1B	; 0x803e1b <__data_end+0x1>
  c2:	f0 91 1c 3e 	lds	r31, 0x3E1C	; 0x803e1c <__data_end+0x2>
  c6:	e8 0f       	add	r30, r24
  c8:	f1 1d       	adc	r31, r1
  ca:	80 81       	ld	r24, Z
  cc:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
	return I2C_IDLE;
}

static i2c_states_t I2C_M_TX(void)
{
	i2c_states_t next_state = I2C_TX_BYTE;
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <I2C_M_TX+0x36>
	{
		TWI0.MDATA = *(i2c_fsm.byte_array + i2c_fsm.byte_count);
	}
	else
	{
		i2c_fsm.trx_complete();
  d4:	ca e1       	ldi	r28, 0x1A	; 26
  d6:	de e3       	ldi	r29, 0x3E	; 62
  d8:	ef 81       	ldd	r30, Y+7	; 0x07
  da:	f8 85       	ldd	r31, Y+8	; 0x08
  dc:	09 95       	icall
		next_state = i2c_fsm.end_state();
  de:	e9 85       	ldd	r30, Y+9	; 0x09
  e0:	fa 85       	ldd	r31, Y+10	; 0x0a
  e2:	09 95       	icall
	}

	i2c_fsm.byte_count++;
  e4:	ea e1       	ldi	r30, 0x1A	; 26
  e6:	fe e3       	ldi	r31, 0x3E	; 62
  e8:	94 81       	ldd	r25, Z+4	; 0x04
  ea:	9f 5f       	subi	r25, 0xFF	; 255
  ec:	94 83       	std	Z+4, r25	; 0x04
	
	return next_state;
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <I2C_M_RX>:

static i2c_states_t I2C_M_RX(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
	// Error caught in ISR routine, for TX/RX select send byte, restart or stop.
	i2c_states_t next_state = I2C_RX_BYTE;
	i2c_fsm.nack_check = 0;
  f8:	ea e1       	ldi	r30, 0x1A	; 26
  fa:	fe e3       	ldi	r31, 0x3E	; 62
  fc:	16 82       	std	Z+6, r1	; 0x06
	*(i2c_fsm.byte_array + i2c_fsm.byte_count) = TWI0.MDATA;
  fe:	84 81       	ldd	r24, Z+4	; 0x04
 100:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <__TEXT_REGION_LENGTH__+0x700818>
 104:	a1 81       	ldd	r26, Z+1	; 0x01
 106:	b2 81       	ldd	r27, Z+2	; 0x02
 108:	a8 0f       	add	r26, r24
 10a:	b1 1d       	adc	r27, r1
 10c:	9c 93       	st	X, r25
	i2c_fsm.byte_count ++;
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	84 83       	std	Z+4, r24	; 0x04
	
	if (i2c_fsm.byte_count < i2c_fsm.size_byte_array)
 112:	93 81       	ldd	r25, Z+3	; 0x03
 114:	89 17       	cp	r24, r25
 116:	50 f4       	brcc	.+20     	; 0x12c <I2C_M_RX+0x38>
	{
		// To send NACK, set ACKACT in MCTRLB to 1
		TWI0.MCTRLB &= ~TWI_ACKACT_bm; // Send ACK
 118:	e0 e1       	ldi	r30, 0x10	; 16
 11a:	f8 e0       	ldi	r31, 0x08	; 8
 11c:	84 81       	ldd	r24, Z+4	; 0x04
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	84 83       	std	Z+4, r24	; 0x04
		TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc; // Need to manually trigger this.	
 122:	84 81       	ldd	r24, Z+4	; 0x04
 124:	82 60       	ori	r24, 0x02	; 2
 126:	84 83       	std	Z+4, r24	; 0x04
}

static i2c_states_t I2C_M_RX(void)
{
	// Error caught in ISR routine, for TX/RX select send byte, restart or stop.
	i2c_states_t next_state = I2C_RX_BYTE;
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	08 c0       	rjmp	.+16     	; 0x13c <I2C_M_RX+0x48>
		TWI0.MCTRLB &= ~TWI_ACKACT_bm; // Send ACK
		TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc; // Need to manually trigger this.	
	}
	else
	{
		i2c_fsm.trx_complete();
 12c:	ca e1       	ldi	r28, 0x1A	; 26
 12e:	de e3       	ldi	r29, 0x3E	; 62
 130:	ef 81       	ldd	r30, Y+7	; 0x07
 132:	f8 85       	ldd	r31, Y+8	; 0x08
 134:	09 95       	icall
		next_state = i2c_fsm.end_state();
 136:	e9 85       	ldd	r30, Y+9	; 0x09
 138:	fa 85       	ldd	r31, Y+10	; 0x0a
 13a:	09 95       	icall
	}
	
	return next_state;
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <I2C_M_RX_NACK>:

static i2c_states_t I2C_M_RX_NACK(void)
{
	// No distinction between DATA/ADDR fail
	return I2C_M_STOP();
 142:	a4 df       	rcall	.-184    	; 0x8c <I2C_M_STOP>
}
 144:	08 95       	ret

00000146 <I2C_M_ARB_LOST>:
// ARBITRATION ERROR
// Can lose arbitration during high data, NACK or start/repeat start.
// Need to abort or re-send start (MADDR). Write to MADDR will clear flag.
static i2c_states_t I2C_M_ARB_LOST(void)
{
	return I2C_M_STOP();
 146:	a2 df       	rcall	.-188    	; 0x8c <I2C_M_STOP>
}
 148:	08 95       	ret

0000014a <I2C_M_BUS_ERR>:
// BUS ERROR
// S/Sr/P violation
// Reset peripheral and Re-send. MADDR clears BUSERR flag.
static i2c_states_t I2C_M_BUS_ERR(void)
{
	return I2C_M_RESET();
 14a:	a7 df       	rcall	.-178    	; 0x9a <I2C_M_RESET>
}
 14c:	08 95       	ret

0000014e <i2c_state_isr>:
	I2C_M_ARB_LOST,
	I2C_M_BUS_ERR
};

static void i2c_state_isr (void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	// Check ARBLOST in multi-master environment.
	// Read triggers ACK/NACK and one byte read. RIF then set, WIF on error.
	// TWI0.MSTATUS |= TWI_WIF_bm | TWI_RIF_bm; // Not required. Cleared by state machine operations.	
	
// PROBLEM: STALLS ON NACK SIGNAL. SHOULD ONLY BE CHECKING THIS AFTER START OR BYTE TX //
	if (i2c_fsm.nack_check && (TWI0.MSTATUS & TWI_RXACK_bm)) // NACK received
 152:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <__data_end+0x6>
 156:	88 23       	and	r24, r24
 158:	39 f0       	breq	.+14     	; 0x168 <i2c_state_isr+0x1a>
 15a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 15e:	84 ff       	sbrs	r24, 4
 160:	03 c0       	rjmp	.+6      	; 0x168 <i2c_state_isr+0x1a>
	{
		i2c_fsm.state = I2C_NACK;
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__data_end+0x5>
	}
	
	if (TWI0.MSTATUS & TWI_ARBLOST_bm)
 168:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 16c:	83 ff       	sbrs	r24, 3
 16e:	03 c0       	rjmp	.+6      	; 0x176 <i2c_state_isr+0x28>
	{
		i2c_fsm.state = I2C_ARB_ERR;
 170:	87 e0       	ldi	r24, 0x07	; 7
 172:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__data_end+0x5>
	}
	
	if(TWI0.MSTATUS & TWI_BUSERR_bm)
 176:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <__TEXT_REGION_LENGTH__+0x700815>
 17a:	82 ff       	sbrs	r24, 2
 17c:	03 c0       	rjmp	.+6      	; 0x184 <i2c_state_isr+0x36>
	{
		i2c_fsm.state = I2C_BUS_ERR;
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <__data_end+0x5>
	}
	
	i2c_fsm.state = state_callbacks[i2c_fsm.state]();
 184:	ca e1       	ldi	r28, 0x1A	; 26
 186:	de e3       	ldi	r29, 0x3E	; 62
 188:	ed 81       	ldd	r30, Y+5	; 0x05
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e8 5c       	subi	r30, 0xC8	; 200
 192:	f8 47       	sbci	r31, 0x78	; 120
 194:	01 90       	ld	r0, Z+
 196:	f0 81       	ld	r31, Z
 198:	e0 2d       	mov	r30, r0
 19a:	09 95       	icall
 19c:	8d 83       	std	Y+5, r24	; 0x05
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <__vector_20>:
/*	------------------------------------------------------------------------------------------------
	INTERRUPTS
	------------------------------------------------------------------------------------------------	*/

ISR(TWI0_TWIM_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	// Bus is IDLE, OWNER, BUSY or UNDEFINED. Errors are ARBLOST and BUSERR
	// ARBLOST fails at any point on packet transmission, start -> NACK
	// For ARBLOST must restart (write to MADDR). MADDR write clears ARBLOST flag.
	// BUSERR is an illegal condition (e.g. Start followed by Stop). MADDR write clears BUSERR flag.
	
	i2c_state_isr();
 1c6:	c3 df       	rcall	.-122    	; 0x14e <i2c_state_isr>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <i2c_master_init>:
	------------------------------------------------------------------------------------------------	*/

void i2c_master_init()
{
	// Peripheral controls
	TWI0.CTRLA = TWI_SDASETUP_4CYC_gc | TWI_SDAHOLD_OFF_gc | 0<<TWI_FMPEN_bp;
 1ea:	e0 e1       	ldi	r30, 0x10	; 16
 1ec:	f8 e0       	ldi	r31, 0x08	; 8
 1ee:	10 82       	st	Z, r1
	TWI0.DBGCTRL = TWI_DBGRUN_bm; // Keep peripheral running during debug mode
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	82 83       	std	Z+2, r24	; 0x02
	// I2C Master controls
	TWI0.MBAUD = I2C_BAUD; // Derives SCL hi/lo times. (See data sheet for equation) Write while ENABLE bit in TWI.MCTRLA is 0
 1f4:	8b e0       	ldi	r24, 0x0B	; 11
 1f6:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_TIMEOUT_DISABLED_gc | TWI_ENABLE_bm; // Quick command and smart mode not in use
 1f8:	81 ec       	ldi	r24, 0xC1	; 193
 1fa:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MCTRLB &= 0<<TWI_ACKACT_bp; // 0 send ACK, 1 send NACK when data read or execute command written to CMD bits
 1fc:	84 81       	ldd	r24, Z+4	; 0x04
 1fe:	14 82       	std	Z+4, r1	; 0x04
	TWI0_MCTRLB |= TWI_FLUSH_bm;
 200:	a4 e1       	ldi	r26, 0x14	; 20
 202:	b8 e0       	ldi	r27, 0x08	; 8
 204:	8c 91       	ld	r24, X
 206:	88 60       	ori	r24, 0x08	; 8
 208:	8c 93       	st	X, r24
	
	// ASSUMES BUS IS IDLE, SHOULD CHECK SDA/SCK LINES. (Port A 1&2 for alt. pin config)
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	
 20a:	85 81       	ldd	r24, Z+5	; 0x05
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	85 83       	std	Z+5, r24	; 0x05

	i2c_fsm.state = I2C_IDLE;
 210:	10 92 1f 3e 	sts	0x3E1F, r1	; 0x803e1f <__data_end+0x5>
 214:	08 95       	ret

00000216 <i2c_set_stop>:
}

void i2c_set_stop()
{
	i2c_fsm.end_state = I2C_M_STOP;
 216:	86 e4       	ldi	r24, 0x46	; 70
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <__data_end+0x9>
 21e:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <__data_end+0xa>
 222:	08 95       	ret

00000224 <i2c_set_restart>:
}

void i2c_set_restart()
{
	i2c_fsm.end_state = I2C_M_START;
 224:	88 e3       	ldi	r24, 0x38	; 56
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <__data_end+0x9>
 22c:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <__data_end+0xa>
 230:	08 95       	ret

00000232 <i2c_set_buffer>:
}

void i2c_set_buffer(uint8_t slave_addr, uint8_t *data, uint8_t byte_count)
{
	i2c_fsm.slave_addr = slave_addr;
 232:	ea e1       	ldi	r30, 0x1A	; 26
 234:	fe e3       	ldi	r31, 0x3E	; 62
 236:	80 83       	st	Z, r24
	i2c_fsm.byte_array = data;
 238:	61 83       	std	Z+1, r22	; 0x01
 23a:	72 83       	std	Z+2, r23	; 0x02
	i2c_fsm.size_byte_array = byte_count;
 23c:	43 83       	std	Z+3, r20	; 0x03
 23e:	08 95       	ret

00000240 <i2c_start>:
void i2c_start (callback cb)
{
//	switch (i2c_fsm.state)
//	{
//		case I2C_IDLE :
	i2c_fsm.trx_complete = cb;
 240:	ea e1       	ldi	r30, 0x1A	; 26
 242:	fe e3       	ldi	r31, 0x3E	; 62
 244:	87 83       	std	Z+7, r24	; 0x07
 246:	90 87       	std	Z+8, r25	; 0x08
	i2c_fsm.state = I2C_START;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	85 83       	std	Z+5, r24	; 0x05
	i2c_fsm.nack_check = 0;
 24c:	16 82       	std	Z+6, r1	; 0x06
	i2c_fsm.state = I2C_IDLE;
}

void i2c_set_stop()
{
	i2c_fsm.end_state = I2C_M_STOP;
 24e:	86 e4       	ldi	r24, 0x46	; 70
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	81 87       	std	Z+9, r24	; 0x09
 254:	92 87       	std	Z+10, r25	; 0x0a
//		case I2C_IDLE :
	i2c_fsm.trx_complete = cb;
	i2c_fsm.state = I2C_START;
	i2c_fsm.nack_check = 0;
	i2c_set_stop();
	i2c_state_isr();
 256:	7b df       	rcall	.-266    	; 0x14e <i2c_state_isr>
 258:	08 95       	ret

0000025a <i2c_idle>:
//	}
}

uint8_t i2c_idle ()
{
	return i2c_fsm.state == I2C_IDLE;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 91 1f 3e 	lds	r25, 0x3E1F	; 0x803e1f <__data_end+0x5>
 260:	91 11       	cpse	r25, r1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret

00000266 <queue_msg>:
	
	VPORTB.OUT |= PIN6_bm;
	USART0.TXDATAL = c;
	while(!(USART0.STATUS & USART_TXCIF_bm));
	VPORTB.OUT &= ~PIN6_bm;
	VPORTB.DIR &= ~PIN2_bm | PIN6_bm;
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	f7 01       	movw	r30, r14
 270:	90 81       	ld	r25, Z
 272:	96 95       	lsr	r25
 274:	96 95       	lsr	r25
 276:	93 70       	andi	r25, 0x03	; 3
 278:	d8 01       	movw	r26, r16
 27a:	34 e0       	ldi	r19, 0x04	; 4
 27c:	93 9f       	mul	r25, r19
 27e:	a0 0d       	add	r26, r0
 280:	b1 1d       	adc	r27, r1
 282:	11 24       	eor	r1, r1
 284:	8f 77       	andi	r24, 0x7F	; 127
 286:	9c 91       	ld	r25, X
 288:	90 78       	andi	r25, 0x80	; 128
 28a:	89 2b       	or	r24, r25
 28c:	8c 93       	st	X, r24
 28e:	80 81       	ld	r24, Z
 290:	86 95       	lsr	r24
 292:	86 95       	lsr	r24
 294:	83 70       	andi	r24, 0x03	; 3
 296:	d8 01       	movw	r26, r16
 298:	94 e0       	ldi	r25, 0x04	; 4
 29a:	89 9f       	mul	r24, r25
 29c:	a0 0d       	add	r26, r0
 29e:	b1 1d       	adc	r27, r1
 2a0:	11 24       	eor	r1, r1
 2a2:	8c 91       	ld	r24, X
 2a4:	60 fb       	bst	r22, 0
 2a6:	87 f9       	bld	r24, 7
 2a8:	8c 93       	st	X, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	86 95       	lsr	r24
 2ae:	86 95       	lsr	r24
 2b0:	83 70       	andi	r24, 0x03	; 3
 2b2:	d8 01       	movw	r26, r16
 2b4:	34 e0       	ldi	r19, 0x04	; 4
 2b6:	83 9f       	mul	r24, r19
 2b8:	a0 0d       	add	r26, r0
 2ba:	b1 1d       	adc	r27, r1
 2bc:	11 24       	eor	r1, r1
 2be:	11 96       	adiw	r26, 0x01	; 1
 2c0:	4d 93       	st	X+, r20
 2c2:	5c 93       	st	X, r21
 2c4:	12 97       	sbiw	r26, 0x02	; 2
 2c6:	80 81       	ld	r24, Z
 2c8:	86 95       	lsr	r24
 2ca:	86 95       	lsr	r24
 2cc:	83 70       	andi	r24, 0x03	; 3
 2ce:	d8 01       	movw	r26, r16
 2d0:	94 e0       	ldi	r25, 0x04	; 4
 2d2:	89 9f       	mul	r24, r25
 2d4:	a0 0d       	add	r26, r0
 2d6:	b1 1d       	adc	r27, r1
 2d8:	11 24       	eor	r1, r1
 2da:	13 96       	adiw	r26, 0x03	; 3
 2dc:	2c 93       	st	X, r18
 2de:	c7 01       	movw	r24, r14
 2e0:	59 d1       	rcall	.+690    	; 0x594 <rbuff4_inc>
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	08 95       	ret

000002ec <mcp_i2c_callback>:
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	e0 91 3a 3e 	lds	r30, 0x3E3A	; 0x803e3a <i2c_buff>
 2f8:	e3 70       	andi	r30, 0x03	; 3
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	e6 5d       	subi	r30, 0xD6	; 214
 306:	f1 4c       	sbci	r31, 0xC1	; 193
 308:	80 81       	ld	r24, Z
 30a:	88 23       	and	r24, r24
 30c:	94 f4       	brge	.+36     	; 0x332 <mcp_i2c_callback+0x46>
 30e:	80 91 29 3e 	lds	r24, 0x3E29	; 0x803e29 <i2c_rx_buffer>
 312:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <__data_start+0x1>
 316:	0f 2e       	mov	r0, r31
 318:	fa e3       	ldi	r31, 0x3A	; 58
 31a:	ef 2e       	mov	r14, r31
 31c:	fe e3       	ldi	r31, 0x3E	; 62
 31e:	ff 2e       	mov	r15, r31
 320:	f0 2d       	mov	r31, r0
 322:	0a e2       	ldi	r16, 0x2A	; 42
 324:	1e e3       	ldi	r17, 0x3E	; 62
 326:	22 e0       	ldi	r18, 0x02	; 2
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	5e e3       	ldi	r21, 0x3E	; 62
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	80 e2       	ldi	r24, 0x20	; 32
 330:	9a df       	rcall	.-204    	; 0x266 <queue_msg>
 332:	8a e3       	ldi	r24, 0x3A	; 58
 334:	9e e3       	ldi	r25, 0x3E	; 62
 336:	55 d1       	rcall	.+682    	; 0x5e2 <rbuff4_dec>
 338:	80 91 3a 3e 	lds	r24, 0x3E3A	; 0x803e3a <i2c_buff>
 33c:	80 73       	andi	r24, 0x30	; 48
 33e:	99 f0       	breq	.+38     	; 0x366 <mcp_i2c_callback+0x7a>
 340:	e0 91 3a 3e 	lds	r30, 0x3E3A	; 0x803e3a <i2c_buff>
 344:	e3 70       	andi	r30, 0x03	; 3
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	e6 5d       	subi	r30, 0xD6	; 214
 352:	f1 4c       	sbci	r31, 0xC1	; 193
 354:	61 81       	ldd	r22, Z+1	; 0x01
 356:	72 81       	ldd	r23, Z+2	; 0x02
 358:	80 81       	ld	r24, Z
 35a:	43 81       	ldd	r20, Z+3	; 0x03
 35c:	88 0f       	add	r24, r24
 35e:	81 1d       	adc	r24, r1
 360:	68 df       	rcall	.-304    	; 0x232 <i2c_set_buffer>
 362:	60 df       	rcall	.-320    	; 0x224 <i2c_set_restart>
 364:	01 c0       	rjmp	.+2      	; 0x368 <mcp_i2c_callback+0x7c>
 366:	57 df       	rcall	.-338    	; 0x216 <i2c_set_stop>
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	08 95       	ret

00000372 <system_init>:
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__TEXT_REGION_LENGTH__+0x700455>
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x700421>
 37e:	e0 e0       	ldi	r30, 0x00	; 0
 380:	f4 e0       	ldi	r31, 0x04	; 4
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	84 8b       	std	Z+20, r24	; 0x14
 38a:	85 8b       	std	Z+21, r24	; 0x15
 38c:	84 e1       	ldi	r24, 0x14	; 20
 38e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
 392:	8f b7       	in	r24, 0x3f	; 63
 394:	80 68       	ori	r24, 0x80	; 128
 396:	8f bf       	out	0x3f, r24	; 63
 398:	97 d1       	rcall	.+814    	; 0x6c8 <spi_master_init>
 39a:	27 df       	rcall	.-434    	; 0x1ea <i2c_master_init>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret

000003a0 <usart_init>:
 3a0:	e0 e0       	ldi	r30, 0x00	; 0
 3a2:	f8 e0       	ldi	r31, 0x08	; 8
 3a4:	80 e4       	ldi	r24, 0x40	; 64
 3a6:	86 83       	std	Z+6, r24	; 0x06
 3a8:	87 ee       	ldi	r24, 0xE7	; 231
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	80 87       	std	Z+8, r24	; 0x08
 3ae:	91 87       	std	Z+9, r25	; 0x09
 3b0:	08 95       	ret

000003b2 <mcp_cycle_LEDS>:
		i2c_set_stop();
	}
}

void mcp_cycle_LEDS(void)
{
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
	LED_test = LED_test >> 7 | LED_test << 1;
 3ba:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <LED_test>
 3be:	88 0f       	add	r24, r24
 3c0:	81 1d       	adc	r24, r1
 3c2:	80 93 11 3e 	sts	0x3E11, r24	; 0x803e11 <LED_test>
	spi_bytes[0] =  SPI_ADDR<<1 | MCP23X17_WRITE;
 3c6:	e5 e2       	ldi	r30, 0x25	; 37
 3c8:	fe e3       	ldi	r31, 0x3E	; 62
 3ca:	90 e4       	ldi	r25, 0x40	; 64
 3cc:	90 83       	st	Z, r25
	spi_bytes[1] = PORTA_ADDR(OLAT, SEQ_ADDR);
 3ce:	94 e1       	ldi	r25, 0x14	; 20
 3d0:	91 83       	std	Z+1, r25	; 0x01
	spi_bytes[2] = LED_test;
 3d2:	82 83       	std	Z+2, r24	; 0x02
	spi_start(spi_bytes, spi_bytes, 3);
 3d4:	43 e0       	ldi	r20, 0x03	; 3
 3d6:	bf 01       	movw	r22, r30
 3d8:	cf 01       	movw	r24, r30
 3da:	8c d1       	rcall	.+792    	; 0x6f4 <spi_start>

	// Buffer may be overwritten this way if queue is large. Use separate Read/Write buffers.
	i2c_tx_buffer[1] = LED_test;
 3dc:	80 91 11 3e 	lds	r24, 0x3E11	; 0x803e11 <LED_test>
 3e0:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <__data_start+0x1>
	queue_msg(I2C_ADDR_1, I2C_WRITE_bm, i2c_tx_buffer, 2, i2c_msgs, &i2c_buff);
 3e4:	0f 2e       	mov	r0, r31
 3e6:	fa e3       	ldi	r31, 0x3A	; 58
 3e8:	ef 2e       	mov	r14, r31
 3ea:	fe e3       	ldi	r31, 0x3E	; 62
 3ec:	ff 2e       	mov	r15, r31
 3ee:	f0 2d       	mov	r31, r0
 3f0:	0a e2       	ldi	r16, 0x2A	; 42
 3f2:	1e e3       	ldi	r17, 0x3E	; 62
 3f4:	22 e0       	ldi	r18, 0x02	; 2
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	5e e3       	ldi	r21, 0x3E	; 62
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	33 df       	rcall	.-410    	; 0x266 <queue_msg>
	
	if(i2c_idle())
 400:	2c df       	rcall	.-424    	; 0x25a <i2c_idle>
 402:	88 23       	and	r24, r24
 404:	a1 f0       	breq	.+40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		i2c_set_buffer(i2c_msgs[i2c_buff.head].addr<<1 | i2c_msgs[i2c_buff.head].rw, i2c_msgs[i2c_buff.head].data, i2c_msgs[i2c_buff.head].data_len);
 406:	e0 91 3a 3e 	lds	r30, 0x3E3A	; 0x803e3a <i2c_buff>
 40a:	e3 70       	andi	r30, 0x03	; 3
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e6 5d       	subi	r30, 0xD6	; 214
 418:	f1 4c       	sbci	r31, 0xC1	; 193
 41a:	61 81       	ldd	r22, Z+1	; 0x01
 41c:	72 81       	ldd	r23, Z+2	; 0x02
 41e:	80 81       	ld	r24, Z
 420:	43 81       	ldd	r20, Z+3	; 0x03
 422:	88 0f       	add	r24, r24
 424:	81 1d       	adc	r24, r1
 426:	05 df       	rcall	.-502    	; 0x232 <i2c_set_buffer>
		i2c_start(mcp_i2c_callback);	
 428:	86 e7       	ldi	r24, 0x76	; 118
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	09 df       	rcall	.-494    	; 0x240 <i2c_start>
	}
	
}
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <mcp_read_inputs>:

void mcp_read_inputs(void)
{
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
	spi_bytes[0] = SPI_ADDR<<1 | MCP23X17_READ;
 440:	e5 e2       	ldi	r30, 0x25	; 37
 442:	fe e3       	ldi	r31, 0x3E	; 62
 444:	81 e4       	ldi	r24, 0x41	; 65
 446:	80 83       	st	Z, r24
	spi_bytes[1] = PORTB_ADDR(INTCAP, SEQ_ADDR);
 448:	81 e1       	ldi	r24, 0x11	; 17
 44a:	81 83       	std	Z+1, r24	; 0x01
	spi_start(spi_bytes, spi_bytes, 3);
 44c:	43 e0       	ldi	r20, 0x03	; 3
 44e:	bf 01       	movw	r22, r30
 450:	cf 01       	movw	r24, r30
 452:	50 d1       	rcall	.+672    	; 0x6f4 <spi_start>
	
// I2C read requires write to select register, then restart to transfer.
	queue_msg(I2C_ADDR_1, I2C_WRITE_bm, &INTCAP_ADDR, 1, i2c_msgs, &i2c_buff);
 454:	0f 2e       	mov	r0, r31
 456:	fa e3       	ldi	r31, 0x3A	; 58
 458:	ef 2e       	mov	r14, r31
 45a:	fe e3       	ldi	r31, 0x3E	; 62
 45c:	ff 2e       	mov	r15, r31
 45e:	f0 2d       	mov	r31, r0
 460:	0a e2       	ldi	r16, 0x2A	; 42
 462:	1e e3       	ldi	r17, 0x3E	; 62
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	40 e1       	ldi	r20, 0x10	; 16
 468:	5e e3       	ldi	r21, 0x3E	; 62
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	80 e2       	ldi	r24, 0x20	; 32
 46e:	fb de       	rcall	.-522    	; 0x266 <queue_msg>
	queue_msg(I2C_ADDR_1, I2C_READ_bm, &i2c_rx_buffer, 1, i2c_msgs, &i2c_buff);
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	49 e2       	ldi	r20, 0x29	; 41
 474:	5e e3       	ldi	r21, 0x3E	; 62
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	80 e2       	ldi	r24, 0x20	; 32
 47a:	f5 de       	rcall	.-534    	; 0x266 <queue_msg>
	
	if(i2c_idle())
 47c:	ee de       	rcall	.-548    	; 0x25a <i2c_idle>
 47e:	88 23       	and	r24, r24
 480:	a1 f0       	breq	.+40     	; 0x4aa <mcp_read_inputs+0x72>
	{
		i2c_set_buffer(i2c_msgs[i2c_buff.head].addr<<1 | i2c_msgs[i2c_buff.head].rw, i2c_msgs[i2c_buff.head].data, i2c_msgs[i2c_buff.head].data_len);
 482:	e0 91 3a 3e 	lds	r30, 0x3E3A	; 0x803e3a <i2c_buff>
 486:	e3 70       	andi	r30, 0x03	; 3
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	e6 5d       	subi	r30, 0xD6	; 214
 494:	f1 4c       	sbci	r31, 0xC1	; 193
 496:	61 81       	ldd	r22, Z+1	; 0x01
 498:	72 81       	ldd	r23, Z+2	; 0x02
 49a:	80 81       	ld	r24, Z
 49c:	43 81       	ldd	r20, Z+3	; 0x03
 49e:	88 0f       	add	r24, r24
 4a0:	81 1d       	adc	r24, r1
 4a2:	c7 de       	rcall	.-626    	; 0x232 <i2c_set_buffer>
		i2c_start(mcp_i2c_callback);	
 4a4:	86 e7       	ldi	r24, 0x76	; 118
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	cb de       	rcall	.-618    	; 0x240 <i2c_start>
	}
}
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	08 95       	ret

000004b4 <main>:

int main(void)
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	60 97       	sbiw	r28, 0x10	; 16
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	de bf       	out	0x3e, r29	; 62
	uint8_t spi_rx_temp[16]; // Used once, should free up this memory after use.
	
	system_init();
 4c2:	57 df       	rcall	.-338    	; 0x372 <system_init>
	usart_init();
 4c4:	6d df       	rcall	.-294    	; 0x3a0 <usart_init>
	rbuff4_clear(&i2c_buff);
 4c6:	8a e3       	ldi	r24, 0x3A	; 58
 4c8:	9e e3       	ldi	r25, 0x3E	; 62
 4ca:	5e d0       	rcall	.+188    	; 0x588 <rbuff4_clear>
	spi_start(SPI_SETUP, spi_rx_temp, 16); // Read MCP23X17 settings from EEPROM	
 4cc:	40 e1       	ldi	r20, 0x10	; 16
 4ce:	be 01       	movw	r22, r28
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	94 e1       	ldi	r25, 0x14	; 20
 4d8:	0d d1       	rcall	.+538    	; 0x6f4 <spi_start>
	i2c_set_buffer((I2C_ADDR_1<<1) | I2C_WRITE_bm, I2C_SETUP, 15);
 4da:	4f e0       	ldi	r20, 0x0F	; 15
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	74 e1       	ldi	r23, 0x14	; 20
 4e0:	80 e4       	ldi	r24, 0x40	; 64
 4e2:	a7 de       	rcall	.-690    	; 0x232 <i2c_set_buffer>
	i2c_start(mcp_i2c_callback);
 4e4:	86 e7       	ldi	r24, 0x76	; 118
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	ab de       	rcall	.-682    	; 0x240 <i2c_start>
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <main+0x36>

000004ec <__vector_3>:
		
    }
}

ISR(PORTA_PORT_vect) 
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
	uint8_t intflags = PORTA.INTFLAGS;
 50e:	e0 e0       	ldi	r30, 0x00	; 0
 510:	f4 e0       	ldi	r31, 0x04	; 4
 512:	81 85       	ldd	r24, Z+9	; 0x09
	PORTA.INTFLAGS = intflags;
 514:	81 87       	std	Z+9, r24	; 0x09
	
	// MCP PORTB interrupt
	// PINA4 -> SPI
	// PINA5 -> I2C
	
	mcp_read_inputs();
 516:	90 df       	rcall	.-224    	; 0x438 <mcp_read_inputs>
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	7f 91       	pop	r23
 526:	6f 91       	pop	r22
 528:	5f 91       	pop	r21
 52a:	4f 91       	pop	r20
 52c:	3f 91       	pop	r19
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <__vector_5>:

ISR(PORTC_PORT_vect) // Eval board button
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	uint8_t intflags = PORTC.INTFLAGS;
 55c:	e0 e4       	ldi	r30, 0x40	; 64
 55e:	f4 e0       	ldi	r31, 0x04	; 4
 560:	81 85       	ldd	r24, Z+9	; 0x09
	PORTC.INTFLAGS = intflags;
 562:	81 87       	std	Z+9, r24	; 0x09
	mcp_cycle_LEDS();
 564:	26 df       	rcall	.-436    	; 0x3b2 <mcp_cycle_LEDS>
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <rbuff4_clear>:
#include "msg_buffer.h"

void rbuff4_clear (struct rbuff4_t *buff_ptr)
{
 588:	fc 01       	movw	r30, r24
	buff_ptr->head = 0;
 58a:	90 81       	ld	r25, Z
	buff_ptr->tail = 0;
	buff_ptr->status = RB_EMPTY;
	buff_ptr->overflow = 0;
 58c:	90 7c       	andi	r25, 0xC0	; 192
 58e:	9f 7b       	andi	r25, 0xBF	; 191
 590:	90 83       	st	Z, r25
 592:	08 95       	ret

00000594 <rbuff4_inc>:
}

void rbuff4_inc (struct rbuff4_t *buff_ptr)
{
 594:	fc 01       	movw	r30, r24
	if(buff_ptr->status < RB_FULL)
 596:	20 81       	ld	r18, Z
 598:	22 95       	swap	r18
 59a:	2f 70       	andi	r18, 0x0F	; 15
 59c:	23 70       	andi	r18, 0x03	; 3
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	22 30       	cpi	r18, 0x02	; 2
 5a2:	31 05       	cpc	r19, r1
 5a4:	d4 f4       	brge	.+52     	; 0x5da <rbuff4_inc+0x46>
	{
		buff_ptr->tail++;
 5a6:	80 81       	ld	r24, Z
 5a8:	28 2f       	mov	r18, r24
 5aa:	26 95       	lsr	r18
 5ac:	26 95       	lsr	r18
 5ae:	2f 5f       	subi	r18, 0xFF	; 255
 5b0:	23 70       	andi	r18, 0x03	; 3
 5b2:	92 2f       	mov	r25, r18
 5b4:	99 0f       	add	r25, r25
 5b6:	99 0f       	add	r25, r25
 5b8:	83 7f       	andi	r24, 0xF3	; 243
 5ba:	89 2b       	or	r24, r25
 5bc:	80 83       	st	Z, r24
		buff_ptr->status = ((buff_ptr->tail) == buff_ptr->head) ? RB_FULL : RB_IN_USE;
 5be:	83 70       	andi	r24, 0x03	; 3
 5c0:	28 17       	cp	r18, r24
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <rbuff4_inc+0x34>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <rbuff4_inc+0x36>
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	98 2f       	mov	r25, r24
 5cc:	92 95       	swap	r25
 5ce:	90 7f       	andi	r25, 0xF0	; 240
 5d0:	80 81       	ld	r24, Z
 5d2:	8f 7c       	andi	r24, 0xCF	; 207
 5d4:	89 2b       	or	r24, r25
 5d6:	80 83       	st	Z, r24
 5d8:	08 95       	ret
	}
	else
	{
		buff_ptr->overflow = 1;
 5da:	80 81       	ld	r24, Z
		buff_ptr->status = RB_ERR_OVERFLOW;
 5dc:	80 67       	ori	r24, 0x70	; 112
 5de:	80 83       	st	Z, r24
 5e0:	08 95       	ret

000005e2 <rbuff4_dec>:
	}
}

void rbuff4_dec (struct rbuff4_t *buff_ptr)
{
 5e2:	fc 01       	movw	r30, r24
	if (buff_ptr->status != RB_EMPTY)
 5e4:	80 81       	ld	r24, Z
 5e6:	80 73       	andi	r24, 0x30	; 48
 5e8:	b1 f0       	breq	.+44     	; 0x616 <rbuff4_dec+0x34>
	{
		buff_ptr->head++;
 5ea:	90 81       	ld	r25, Z
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	89 0f       	add	r24, r25
 5f0:	83 70       	andi	r24, 0x03	; 3
 5f2:	9c 7f       	andi	r25, 0xFC	; 252
 5f4:	98 2b       	or	r25, r24
 5f6:	90 83       	st	Z, r25
		buff_ptr->status = (buff_ptr->tail == buff_ptr->head) ? RB_EMPTY : RB_IN_USE;
 5f8:	96 95       	lsr	r25
 5fa:	96 95       	lsr	r25
 5fc:	93 70       	andi	r25, 0x03	; 3
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	98 13       	cpse	r25, r24
 602:	01 c0       	rjmp	.+2      	; 0x606 <rbuff4_dec+0x24>
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	23 70       	andi	r18, 0x03	; 3
 608:	92 2f       	mov	r25, r18
 60a:	92 95       	swap	r25
 60c:	90 7f       	andi	r25, 0xF0	; 240
 60e:	20 81       	ld	r18, Z
 610:	2f 7c       	andi	r18, 0xCF	; 207
 612:	29 2b       	or	r18, r25
 614:	20 83       	st	Z, r18
 616:	08 95       	ret

00000618 <spi_slave_deselect>:
	return SPI_BUSY;
}

static spi_status_t spi_slave_deselect(void)
{
	VPORTC.OUT |= PIN3_bm;
 618:	4b 9a       	sbi	0x09, 3	; 9
	return spi_io.status;
}
 61a:	80 91 12 3e 	lds	r24, 0x3E12	; 0x803e12 <spi_io>
 61e:	08 95       	ret

00000620 <__vector_21>:

	}
}

ISR(SPI0_INT_vect)
{
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
 62a:	2f 93       	push	r18
 62c:	3f 93       	push	r19
 62e:	4f 93       	push	r20
 630:	5f 93       	push	r21
 632:	6f 93       	push	r22
 634:	7f 93       	push	r23
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
 63a:	af 93       	push	r26
 63c:	bf 93       	push	r27
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	1f 92       	push	r1
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
	register8_t int_flags = SPI0.INTFLAGS;
 64c:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
 650:	89 83       	std	Y+1, r24	; 0x01
	// SPI_WRCOL_bm		write collision
	// SPI_IF_bm		byte transfer complete
	
	// CURRENTLY NO COLLISION ERROR HANDLING
	if (int_flags & SPI_WRCOL_bm) 
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	86 ff       	sbrs	r24, 6
 656:	05 c0       	rjmp	.+10     	; 0x662 <__vector_21+0x42>
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 658:	df df       	rcall	.-66     	; 0x618 <spi_slave_deselect>
	// SPI_IF_bm		byte transfer complete
	
	// CURRENTLY NO COLLISION ERROR HANDLING
	if (int_flags & SPI_WRCOL_bm) 
	{
		spi_io.status = spi_slave_reset();
 65a:	85 e0       	ldi	r24, 0x05	; 5
 65c:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <spi_io>
 660:	1d c0       	rjmp	.+58     	; 0x69c <__vector_21+0x7c>
	/*
		For non-buffer mode:
		SPI_IF_bm is set on transfer complete. Cleared on interrupt vector execution, or by SPI.INTFLAGS read followed by DATA access.
		SPI_WRCOL is set if DATA is written before shift out is complete.
	*/
	*(spi_io.rx_byte_array + spi_io.byte_count) = SPI0.DATA;
 662:	e2 e1       	ldi	r30, 0x12	; 18
 664:	fe e3       	ldi	r31, 0x3E	; 62
 666:	86 81       	ldd	r24, Z+6	; 0x06
 668:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 66c:	a3 81       	ldd	r26, Z+3	; 0x03
 66e:	b4 81       	ldd	r27, Z+4	; 0x04
 670:	a8 0f       	add	r26, r24
 672:	b1 1d       	adc	r27, r1
 674:	9c 93       	st	X, r25
	spi_io.byte_count ++;
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	86 83       	std	Z+6, r24	; 0x06
	
	if (spi_io.byte_count < spi_io.size_byte_array)
 67a:	95 81       	ldd	r25, Z+5	; 0x05
 67c:	89 17       	cp	r24, r25
 67e:	50 f4       	brcc	.+20     	; 0x694 <__vector_21+0x74>
	{
		SPI0.DATA = *(spi_io.tx_byte_array + spi_io.byte_count);		
 680:	e0 91 13 3e 	lds	r30, 0x3E13	; 0x803e13 <spi_io+0x1>
 684:	f0 91 14 3e 	lds	r31, 0x3E14	; 0x803e14 <spi_io+0x2>
 688:	e8 0f       	add	r30, r24
 68a:	f1 1d       	adc	r31, r1
 68c:	80 81       	ld	r24, Z
 68e:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
 692:	04 c0       	rjmp	.+8      	; 0x69c <__vector_21+0x7c>
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 694:	c1 df       	rcall	.-126    	; 0x618 <spi_slave_deselect>
	{
		SPI0.DATA = *(spi_io.tx_byte_array + spi_io.byte_count);		
	}
	else
	{
		spi_io.status = spi_slave_reset();
 696:	85 e0       	ldi	r24, 0x05	; 5
 698:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <spi_io>
	else
	{
		spi_isr();
	}
	
	SPI0.INTFLAGS = 0x00;
 69c:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <__TEXT_REGION_LENGTH__+0x700823>
}
 6a0:	0f 90       	pop	r0
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	ff 91       	pop	r31
 6a8:	ef 91       	pop	r30
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <spi_master_init>:

spi_status_t spi_master_init()
{
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
 6c8:	e0 e4       	ldi	r30, 0x40	; 64
 6ca:	f4 e0       	ldi	r31, 0x04	; 4
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	82 83       	std	Z+2, r24	; 0x02
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
 6d0:	8d e0       	ldi	r24, 0x0D	; 13
 6d2:	81 83       	std	Z+1, r24	; 0x01
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
 6d4:	48 98       	cbi	0x09, 0	; 9
	return spi_io.status;
}

static spi_status_t spi_slave_reset(void)
{
	spi_slave_deselect();
 6d6:	a0 df       	rcall	.-192    	; 0x618 <spi_slave_deselect>
	// For for multiple master configuration, SS must be set as input and held high for master operation.
	
	PORTC.DIRCLR = PIN1_bm;
	PORTC.DIRSET = PIN0_bm | PIN2_bm | PIN3_bm; // Set SCK, MOSI and SS as outputs (Alternate pins). SCK is also onboard LED for eval board.
	VPORTC.OUT &= ~PIN0_bm; // Set SCK low
	spi_io.status = spi_slave_reset();
 6d8:	a2 e1       	ldi	r26, 0x12	; 18
 6da:	be e3       	ldi	r27, 0x3E	; 62
 6dc:	85 e0       	ldi	r24, 0x05	; 5
 6de:	8c 93       	st	X, r24
	
	// Setup for non-buffer mode.
	SPI0.CTRLB = 0<<SPI_BUFEN_bp | 
 6e0:	e0 e2       	ldi	r30, 0x20	; 32
 6e2:	f8 e0       	ldi	r31, 0x08	; 8
 6e4:	84 e4       	ldi	r24, 0x44	; 68
 6e6:	81 83       	std	Z+1, r24	; 0x01
				1<<SPI_BUFWR_bp | 
				1<<SPI_SSD_bp | 
				SPI_MODE_0_gc; // Disable multi-master for now
	SPI0.INTCTRL = SPI_IE_bm; // Buffer mode disabled, use this interrupt.	
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	82 83       	std	Z+2, r24	; 0x02
	SPI0.CTRLA = 0<<SPI_DORD_bp | // Transmit MSB first
 6ec:	85 e2       	ldi	r24, 0x25	; 37
 6ee:	80 83       	st	Z, r24
				0<<SPI_CLK2X_bp | 
				SPI_PRESC_DIV64_gc | 
				1<<SPI_ENABLE_bp;
				
	return spi_io.status;
}
 6f0:	8c 91       	ld	r24, X
 6f2:	08 95       	ret

000006f4 <spi_start>:

spi_status_t spi_start (const uint8_t *tx_buff, uint8_t *rx_buff, uint8_t byte_count)
{
 6f4:	fc 01       	movw	r30, r24
	spi_status_t spi_state = SPI_IDLE;
	switch(spi_io.status)
 6f6:	90 91 12 3e 	lds	r25, 0x3E12	; 0x803e12 <spi_io>
 6fa:	95 30       	cpi	r25, 0x05	; 5
 6fc:	b1 f4       	brne	.+44     	; 0x72a <spi_start+0x36>

static struct spi_data spi_io = {.status = SPI_IDLE, .tx_byte_array = NULL, .rx_byte_array = NULL, .size_byte_array = 0, .byte_count = 0};

static spi_status_t spi_slave_select(void)
{
	VPORTC.OUT &= ~PIN3_bm; // Set SS low
 6fe:	4b 98       	cbi	0x09, 3	; 9
	spi_status_t spi_state = SPI_IDLE;
	switch(spi_io.status)
	{
		case SPI_IDLE:
			// No multi-master -> no check that bus already in use
			spi_io.status = spi_slave_select();
 700:	a2 e1       	ldi	r26, 0x12	; 18
 702:	be e3       	ldi	r27, 0x3E	; 62
 704:	1c 92       	st	X, r1
			spi_io.tx_byte_array = tx_buff;
 706:	11 96       	adiw	r26, 0x01	; 1
 708:	ed 93       	st	X+, r30
 70a:	fc 93       	st	X, r31
 70c:	12 97       	sbiw	r26, 0x02	; 2
			spi_io.rx_byte_array = rx_buff;
 70e:	13 96       	adiw	r26, 0x03	; 3
 710:	6d 93       	st	X+, r22
 712:	7c 93       	st	X, r23
 714:	14 97       	sbiw	r26, 0x04	; 4
			spi_io.size_byte_array = byte_count;
 716:	15 96       	adiw	r26, 0x05	; 5
 718:	4c 93       	st	X, r20
 71a:	15 97       	sbiw	r26, 0x05	; 5
			spi_io.byte_count = 0;
 71c:	16 96       	adiw	r26, 0x06	; 6
 71e:	1c 92       	st	X, r1
			SPI0.DATA = *spi_io.tx_byte_array;
 720:	80 81       	ld	r24, Z
 722:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__TEXT_REGION_LENGTH__+0x700824>
			spi_state = spi_io.status;
 726:	80 e0       	ldi	r24, 0x00	; 0
			break;
 728:	08 95       	ret
		default:
			spi_io.status = SPI_TX_BUFF_ERR;
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	80 93 12 3e 	sts	0x3E12, r24	; 0x803e12 <spi_io>
	return spi_io.status;
}

spi_status_t spi_start (const uint8_t *tx_buff, uint8_t *rx_buff, uint8_t byte_count)
{
	spi_status_t spi_state = SPI_IDLE;
 730:	85 e0       	ldi	r24, 0x05	; 5
		default:
			spi_io.status = SPI_TX_BUFF_ERR;
			break;
	}
	return spi_state;
}
 732:	08 95       	ret

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
